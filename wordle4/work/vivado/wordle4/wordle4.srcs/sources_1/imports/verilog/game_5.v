/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_5 (
    input clk,
    input rst,
    input [15:0] regfile_out_a,
    input [15:0] regfile_out_b,
    input [4:0] keyboard_input,
    input has_keyboard_input,
    input [15:0] alu_out,
    output reg [4:0] which_matrix,
    output reg [4:0] which_letter,
    output reg regfile_we,
    output reg [15:0] regfile_write_address,
    output reg [15:0] regfile_ra,
    output reg [15:0] regfile_rb,
    output reg [15:0] regfile_data,
    output reg [1:0] current_state,
    output reg [5:0] alufn,
    output reg [2:0] asel,
    output reg [2:0] bsel,
    output reg [2:0] matrix_controller_update,
    output reg [4:0] bottom_matrix1_letter_address,
    output reg [4:0] bottom_matrix2_letter_address,
    output reg [4:0] bottom_matrix3_letter_address,
    output reg [4:0] bottom_matrix4_letter_address,
    output reg [15:0] debugger
  );
  
  
  
  localparam RESET_TOP_DISPLAY_game_fsm = 4'd0;
  localparam RESET_BOTTOM_DISPLAY_game_fsm = 4'd1;
  localparam SET_INPUT_CTR_TO_0_game_fsm = 4'd2;
  localparam SET_GUESS_CTR_TO_0_game_fsm = 4'd3;
  localparam SET_NUM_CORRECT_INPUTS_TO_0_game_fsm = 4'd4;
  localparam IDLE_game_fsm = 4'd5;
  localparam CHECK_BUTTON_PRESSED_game_fsm = 4'd6;
  localparam COMPARE_INPUT_CTR_EQUALS_4_game_fsm = 4'd7;
  localparam COMPARE_INPUT_I_WITH_CORRECT_I_game_fsm = 4'd8;
  localparam CLEAR_SET_INPUT_CTR_0_game_fsm = 4'd9;
  localparam CLEAR_RESET_BOTTOM_DISPLAY_game_fsm = 4'd10;
  localparam STORE_INPUT_game_fsm = 4'd11;
  localparam INCREMENT_INPUT_CTR_game_fsm = 4'd12;
  localparam PRINT_LETTER_TO_MATRIX_game_fsm = 4'd13;
  localparam SET_I_TO_ZERO_game_fsm = 4'd14;
  localparam SET_K_TO_ZERO_game_fsm = 4'd15;
  
  reg [3:0] M_game_fsm_d, M_game_fsm_q = RESET_TOP_DISPLAY_game_fsm;
  
  localparam INPUT_CTR = 5'h1c;
  
  localparam INPUT_LETTER_1 = 5'h10;
  
  localparam I = 5'h14;
  
  localparam K = 5'h16;
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    regfile_we = 1'h0;
    regfile_write_address = 1'h0;
    regfile_ra = 1'h0;
    regfile_rb = 1'h0;
    regfile_data = 1'h0;
    which_matrix = 5'h00;
    which_letter = 5'h00;
    current_state = 2'h0;
    alufn = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    matrix_controller_update = 1'h0;
    bottom_matrix1_letter_address = 5'h00;
    bottom_matrix2_letter_address = 5'h00;
    bottom_matrix3_letter_address = 5'h00;
    bottom_matrix4_letter_address = 5'h00;
    debugger = 1'h0;
    if (rst) begin
      M_game_fsm_d = IDLE_game_fsm;
    end else begin
      
      case (M_game_fsm_q)
        RESET_TOP_DISPLAY_game_fsm: begin
          M_game_fsm_d = SET_INPUT_CTR_TO_0_game_fsm;
        end
        SET_INPUT_CTR_TO_0_game_fsm: begin
          regfile_we = 1'h1;
          regfile_write_address = 5'h1c;
          regfile_ra = 1'h0;
          regfile_rb = 1'h0;
          regfile_data = 1'h0;
          M_game_fsm_d = CLEAR_RESET_BOTTOM_DISPLAY_game_fsm;
        end
        RESET_BOTTOM_DISPLAY_game_fsm: begin
          M_game_fsm_d = IDLE_game_fsm;
        end
        IDLE_game_fsm: begin
          if (has_keyboard_input) begin
            regfile_we = 1'h1;
            regfile_ra = 5'h1c;
            regfile_write_address = 5'h10 + regfile_out_a;
            regfile_data = keyboard_input;
            debugger = keyboard_input;
            M_game_fsm_d = PRINT_LETTER_TO_MATRIX_game_fsm;
          end else begin
            M_game_fsm_d = IDLE_game_fsm;
          end
        end
        STORE_INPUT_game_fsm: begin
          regfile_we = 1'h1;
          regfile_ra = 5'h1c;
          regfile_write_address = 5'h10 + regfile_out_a;
          regfile_data = keyboard_input;
          debugger = keyboard_input;
          M_game_fsm_d = STORE_INPUT_game_fsm;
        end
        PRINT_LETTER_TO_MATRIX_game_fsm: begin
          regfile_we = 1'h0;
          regfile_ra = 5'h1c;
          alufn = 6'h00;
          asel = 3'h0;
          bsel = 3'h6;
          regfile_rb = alu_out;
          debugger = regfile_out_b;
          
          case (regfile_out_a)
            16'h0000: begin
              matrix_controller_update = 3'h1;
              bottom_matrix1_letter_address = regfile_out_b;
            end
            16'h0001: begin
              matrix_controller_update = 3'h2;
              bottom_matrix2_letter_address = regfile_out_b;
            end
            16'h0002: begin
              matrix_controller_update = 3'h3;
              bottom_matrix3_letter_address = regfile_out_b;
            end
            16'h0003: begin
              matrix_controller_update = 3'h4;
              bottom_matrix4_letter_address = regfile_out_b;
            end
          endcase
          M_game_fsm_d = PRINT_LETTER_TO_MATRIX_game_fsm;
        end
        default: begin
          M_game_fsm_d = IDLE_game_fsm;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    M_game_fsm_q <= M_game_fsm_d;
  end
  
endmodule
