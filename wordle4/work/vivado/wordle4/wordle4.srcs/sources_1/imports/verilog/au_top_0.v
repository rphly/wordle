/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    input usb_rx,
    input write_one_button_in,
    input write_zero_button_in,
    input read_button_in,
    output reg [23:0] io_led,
    output reg usb_tx,
    output reg outmatrix1
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [5-1:0] M_betaCPU_which_matrix;
  wire [5-1:0] M_betaCPU_which_letter;
  wire [2-1:0] M_betaCPU_current_state;
  wire [1-1:0] M_betaCPU_out_bottom_matrix1;
  wire [1-1:0] M_betaCPU_out_bottom_matrix2;
  wire [1-1:0] M_betaCPU_out_bottom_matrix3;
  wire [1-1:0] M_betaCPU_out_bottom_matrix4;
  reg [1-1:0] M_betaCPU_write_one_button_in;
  reg [1-1:0] M_betaCPU_write_zero_button_in;
  reg [1-1:0] M_betaCPU_read_button_in;
  beta_2 betaCPU (
    .clk(clk),
    .rst(rst),
    .write_one_button_in(M_betaCPU_write_one_button_in),
    .write_zero_button_in(M_betaCPU_write_zero_button_in),
    .read_button_in(M_betaCPU_read_button_in),
    .which_matrix(M_betaCPU_which_matrix),
    .which_letter(M_betaCPU_which_letter),
    .current_state(M_betaCPU_current_state),
    .out_bottom_matrix1(M_betaCPU_out_bottom_matrix1),
    .out_bottom_matrix2(M_betaCPU_out_bottom_matrix2),
    .out_bottom_matrix3(M_betaCPU_out_bottom_matrix3),
    .out_bottom_matrix4(M_betaCPU_out_bottom_matrix4)
  );
  wire [1-1:0] M_read_button_out;
  button_3 read_button (
    .clk(clk),
    .button_input(read_button_in),
    .out(M_read_button_out)
  );
  wire [1-1:0] M_write_zero_button_out;
  button_3 write_zero_button (
    .clk(clk),
    .button_input(write_zero_button_in),
    .out(M_write_zero_button_out)
  );
  wire [1-1:0] M_write_one_button_out;
  button_3 write_one_button (
    .clk(clk),
    .button_input(write_one_button_in),
    .out(M_write_one_button_out)
  );
  reg [0:0] M_read_button_dff_d, M_read_button_dff_q = 1'h0;
  reg [0:0] M_write_one_button_dff_d, M_write_one_button_dff_q = 1'h0;
  reg [0:0] M_write_zero_button_dff_d, M_write_zero_button_dff_q = 1'h0;
  reg [4:0] M_which_letter_tracker_d, M_which_letter_tracker_q = 1'h0;
  reg [4:0] M_which_matrix_tracker_d, M_which_matrix_tracker_q = 1'h0;
  
  always @* begin
    M_write_one_button_dff_d = M_write_one_button_dff_q;
    M_read_button_dff_d = M_read_button_dff_q;
    M_write_zero_button_dff_d = M_write_zero_button_dff_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    io_led = 24'h000000;
    M_betaCPU_write_zero_button_in = M_write_zero_button_out;
    M_betaCPU_write_one_button_in = M_write_one_button_out;
    M_betaCPU_read_button_in = M_read_button_out;
    outmatrix1 = M_betaCPU_out_bottom_matrix1;
    if (M_read_button_out) begin
      if (M_read_button_dff_q == 1'h1) begin
        M_read_button_dff_d = 1'h0;
      end else begin
        M_read_button_dff_d = 1'h1;
      end
    end
    if (M_read_button_dff_q == 1'h1) begin
      io_led[0+0+0-:1] = 1'h1;
    end
    if (M_write_one_button_out) begin
      if (M_write_one_button_dff_q == 1'h1) begin
        M_write_one_button_dff_d = 1'h0;
      end else begin
        M_write_one_button_dff_d = 1'h1;
      end
    end
    if (M_write_one_button_dff_q == 1'h1) begin
      io_led[0+2+0-:1] = 1'h1;
    end
    if (M_write_zero_button_out) begin
      if (M_write_zero_button_dff_q == 1'h1) begin
        M_write_zero_button_dff_d = 1'h0;
      end else begin
        M_write_zero_button_dff_d = 1'h1;
      end
    end
    if (M_write_zero_button_dff_q == 1'h1) begin
      io_led[0+4+0-:1] = 1'h1;
    end
    usb_tx = usb_rx;
  end
  
  always @(posedge clk) begin
    M_read_button_dff_q <= M_read_button_dff_d;
    M_write_one_button_dff_q <= M_write_one_button_dff_d;
    M_write_zero_button_dff_q <= M_write_zero_button_dff_d;
    M_which_letter_tracker_q <= M_which_letter_tracker_d;
    M_which_matrix_tracker_q <= M_which_matrix_tracker_d;
  end
  
endmodule
