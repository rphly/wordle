/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    input usb_rx,
    input a_in,
    input b_in,
    input c_in,
    output reg outmatrix1,
    output reg [23:0] io_led,
    output reg usb_tx
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_betaCPU_out_bottom_matrix1;
  wire [1-1:0] M_betaCPU_out_bottom_matrix2;
  wire [1-1:0] M_betaCPU_out_bottom_matrix3;
  wire [1-1:0] M_betaCPU_out_bottom_matrix4;
  wire [16-1:0] M_betaCPU_debugger;
  reg [1-1:0] M_betaCPU_has_keyboard_input;
  reg [5-1:0] M_betaCPU_keyboard_input;
  beta_2 betaCPU (
    .clk(clk),
    .rst(rst),
    .has_keyboard_input(M_betaCPU_has_keyboard_input),
    .keyboard_input(M_betaCPU_keyboard_input),
    .out_bottom_matrix1(M_betaCPU_out_bottom_matrix1),
    .out_bottom_matrix2(M_betaCPU_out_bottom_matrix2),
    .out_bottom_matrix3(M_betaCPU_out_bottom_matrix3),
    .out_bottom_matrix4(M_betaCPU_out_bottom_matrix4),
    .debugger(M_betaCPU_debugger)
  );
  wire [1-1:0] M_keyboard_controller_is_pressed;
  wire [16-1:0] M_keyboard_controller_out;
  buttons_controller_3 keyboard_controller (
    .clk(clk),
    .rst(rst),
    .a(a_in),
    .is_pressed(M_keyboard_controller_is_pressed),
    .out(M_keyboard_controller_out)
  );
  reg [4:0] M_button_debugger_d, M_button_debugger_q = 1'h0;
  
  always @* begin
    M_button_debugger_d = M_button_debugger_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    io_led = 24'h000000;
    M_betaCPU_keyboard_input = M_keyboard_controller_out;
    M_betaCPU_has_keyboard_input = M_keyboard_controller_is_pressed;
    if (M_keyboard_controller_is_pressed) begin
      M_button_debugger_d = M_button_debugger_q == 1'h1 ? 1'h0 : 1'h1;
    end
    if (M_button_debugger_q == 1'h1) begin
      io_led[8+0+0-:1] = 1'h1;
    end
    if (M_betaCPU_debugger == 16'h0000) begin
      io_led[0+0+0-:1] = 1'h1;
    end
    if (M_betaCPU_debugger == 16'h0001) begin
      io_led[0+7+0-:1] = 1'h1;
    end
    io_led[16+0+7-:8] = M_betaCPU_debugger;
    outmatrix1 = M_betaCPU_out_bottom_matrix1;
    usb_tx = usb_rx;
  end
  
  always @(posedge clk) begin
    M_button_debugger_q <= M_button_debugger_d;
  end
  
endmodule
