/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    input usb_rx,
    input reset_in,
    input oka_in,
    input guess_1_in,
    input guess_2_in,
    input guess_3_in,
    input guess_4_in,
    input [10:0] correct_word_index,
    input a_in,
    input b_in,
    input c_in,
    input d_in,
    input e_in,
    input g_in,
    input f_in,
    input h_in,
    input i_in,
    input j_in,
    input k_in,
    input l_in,
    input m_in,
    input n_in,
    input o_in,
    input p_in,
    input q_in,
    input r_in,
    input s_in,
    input t_in,
    input u_in,
    input v_in,
    input w_in,
    input x_in,
    input y_in,
    input z_in,
    input clear_in,
    input check_in,
    output reg out_bottom_matrix1,
    output reg out_bottom_matrix2,
    output reg out_bottom_matrix3,
    output reg out_bottom_matrix4,
    output reg out_top_matrix1,
    output reg out_top_matrix2,
    output reg out_top_matrix3,
    output reg out_top_matrix4,
    output reg led_strip,
    output reg usb_tx
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [4-1:0] M_led_writer_pixel;
  wire [1-1:0] M_led_writer_led;
  reg [1-1:0] M_led_writer_update;
  reg [24-1:0] M_led_writer_color;
  led_strip_writer_2 led_writer (
    .clk(clk),
    .rst(rst),
    .update(M_led_writer_update),
    .color(M_led_writer_color),
    .pixel(M_led_writer_pixel),
    .led(M_led_writer_led)
  );
  wire [16-1:0] M_betaCPU_current_state;
  wire [1-1:0] M_betaCPU_out_bottom_matrix1;
  wire [1-1:0] M_betaCPU_out_bottom_matrix2;
  wire [1-1:0] M_betaCPU_out_bottom_matrix3;
  wire [1-1:0] M_betaCPU_out_bottom_matrix4;
  wire [1-1:0] M_betaCPU_out_top_matrix1;
  wire [1-1:0] M_betaCPU_out_top_matrix2;
  wire [1-1:0] M_betaCPU_out_top_matrix3;
  wire [1-1:0] M_betaCPU_out_top_matrix4;
  wire [8-1:0] M_betaCPU_debugger1;
  wire [8-1:0] M_betaCPU_debugger2;
  wire [8-1:0] M_betaCPU_debugger3;
  wire [9-1:0] M_betaCPU_correct_word;
  wire [11-1:0] M_betaCPU_correct_word_index_out;
  reg [1-1:0] M_betaCPU_has_keyboard_input;
  reg [5-1:0] M_betaCPU_keyboard_input;
  reg [5-1:0] M_betaCPU_panel_input;
  reg [1-1:0] M_betaCPU_has_panel_input;
  beta_3 betaCPU (
    .clk(clk),
    .rst(rst),
    .has_keyboard_input(M_betaCPU_has_keyboard_input),
    .keyboard_input(M_betaCPU_keyboard_input),
    .panel_input(M_betaCPU_panel_input),
    .has_panel_input(M_betaCPU_has_panel_input),
    .current_state(M_betaCPU_current_state),
    .out_bottom_matrix1(M_betaCPU_out_bottom_matrix1),
    .out_bottom_matrix2(M_betaCPU_out_bottom_matrix2),
    .out_bottom_matrix3(M_betaCPU_out_bottom_matrix3),
    .out_bottom_matrix4(M_betaCPU_out_bottom_matrix4),
    .out_top_matrix1(M_betaCPU_out_top_matrix1),
    .out_top_matrix2(M_betaCPU_out_top_matrix2),
    .out_top_matrix3(M_betaCPU_out_top_matrix3),
    .out_top_matrix4(M_betaCPU_out_top_matrix4),
    .debugger1(M_betaCPU_debugger1),
    .debugger2(M_betaCPU_debugger2),
    .debugger3(M_betaCPU_debugger3),
    .correct_word(M_betaCPU_correct_word),
    .correct_word_index_out(M_betaCPU_correct_word_index_out)
  );
  wire [1-1:0] M_keyboard_controller_is_pressed;
  wire [16-1:0] M_keyboard_controller_out;
  buttons_controller_4 keyboard_controller (
    .clk(clk),
    .rst(rst),
    .a(a_in),
    .b(b_in),
    .c(c_in),
    .d(d_in),
    .e(e_in),
    .f(f_in),
    .g(g_in),
    .h(h_in),
    .i(i_in),
    .j(j_in),
    .k(k_in),
    .l(l_in),
    .m(m_in),
    .n(n_in),
    .o(o_in),
    .p(p_in),
    .q(q_in),
    .r(r_in),
    .s(s_in),
    .t(t_in),
    .u(u_in),
    .v(v_in),
    .w(w_in),
    .x(x_in),
    .y(y_in),
    .z(z_in),
    .is_pressed(M_keyboard_controller_is_pressed),
    .out(M_keyboard_controller_out)
  );
  wire [1-1:0] M_button_panel_controller_is_pressed;
  wire [16-1:0] M_button_panel_controller_out;
  panel_controller_5 button_panel_controller (
    .clk(clk),
    .rst(rst),
    .guess_1_btn(guess_1_in),
    .guess_2_btn(guess_2_in),
    .guess_3_btn(guess_3_in),
    .guess_4_btn(guess_4_in),
    .clear(clear_in),
    .check(check_in),
    .reset(reset_in),
    .oka(oka_in),
    .is_pressed(M_button_panel_controller_is_pressed),
    .out(M_button_panel_controller_out)
  );
  reg [4:0] M_panel_debugger_d, M_panel_debugger_q = 1'h0;
  reg [8:0] M_correct_word_d, M_correct_word_q = 1'h0;
  
  always @* begin
    M_correct_word_d = M_correct_word_q;
    M_panel_debugger_d = M_panel_debugger_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_betaCPU_keyboard_input = M_keyboard_controller_out;
    M_betaCPU_has_keyboard_input = M_keyboard_controller_is_pressed;
    M_betaCPU_panel_input = M_button_panel_controller_out;
    M_betaCPU_has_panel_input = M_button_panel_controller_is_pressed;
    if (M_button_panel_controller_out != 5'h00) begin
      M_panel_debugger_d = M_button_panel_controller_out;
    end
    out_bottom_matrix1 = M_betaCPU_out_bottom_matrix1;
    out_bottom_matrix2 = M_betaCPU_out_bottom_matrix2;
    out_bottom_matrix3 = M_betaCPU_out_bottom_matrix3;
    out_bottom_matrix4 = M_betaCPU_out_bottom_matrix4;
    out_top_matrix1 = M_betaCPU_out_top_matrix1;
    out_top_matrix2 = M_betaCPU_out_top_matrix2;
    out_top_matrix3 = M_betaCPU_out_top_matrix3;
    out_top_matrix4 = M_betaCPU_out_top_matrix4;
    if (M_betaCPU_correct_word != 9'h000) begin
      M_correct_word_d = M_betaCPU_correct_word;
    end
    M_led_writer_update = 1'h1;
    if (M_betaCPU_correct_word_index_out[(M_led_writer_pixel)*1+0-:1]) begin
      M_led_writer_color = 24'h111111;
    end else begin
      M_led_writer_color = 24'h000000;
    end
    led_strip = M_led_writer_led;
    usb_tx = usb_rx;
  end
  
  always @(posedge clk) begin
    M_panel_debugger_q <= M_panel_debugger_d;
    M_correct_word_q <= M_correct_word_d;
  end
  
endmodule
