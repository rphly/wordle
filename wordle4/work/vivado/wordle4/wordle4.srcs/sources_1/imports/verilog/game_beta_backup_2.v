/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_beta_backup_2 (
    input clk,
    input rst,
    input check_button,
    input [1:0] alphabet_button,
    input clear,
    input [3:0] recall,
    input is_pressed,
    output reg [3:0] display_top,
    output reg [3:0] display_bot
  );
  
  
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_3 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [16-1:0] M_regfile_out_a;
  wire [16-1:0] M_regfile_out_b;
  wire [28-1:0] M_regfile_display_top;
  wire [28-1:0] M_regfile_display_bot;
  reg [6-1:0] M_regfile_write_address;
  reg [1-1:0] M_regfile_we;
  reg [16-1:0] M_regfile_data;
  reg [4-1:0] M_regfile_recall;
  reg [6-1:0] M_regfile_read_address_a;
  reg [6-1:0] M_regfile_read_address_b;
  regfile_backup_4 regfile (
    .clk(clk),
    .rst(rst),
    .write_address(M_regfile_write_address),
    .we(M_regfile_we),
    .data(M_regfile_data),
    .recall(M_regfile_recall),
    .read_address_a(M_regfile_read_address_a),
    .read_address_b(M_regfile_read_address_b),
    .out_a(M_regfile_out_a),
    .out_b(M_regfile_out_b),
    .display_top(M_regfile_display_top),
    .display_bot(M_regfile_display_bot)
  );
  wire [1-1:0] M_state_we;
  wire [4-1:0] M_state_asel;
  wire [4-1:0] M_state_bsel;
  wire [6-1:0] M_state_alufn;
  wire [16-1:0] M_state_ra_write;
  wire [16-1:0] M_state_rb_write;
  wire [5-1:0] M_state_ra_address;
  wire [5-1:0] M_state_rb_address;
  wire [5-1:0] M_state_write_address;
  wire [5-1:0] M_state_wdsel;
  reg [1-1:0] M_state_clear;
  reg [5-1:0] M_state_alphabet_pressed;
  reg [1-1:0] M_state_check_ans_pressed;
  reg [16-1:0] M_state_ra_read;
  reg [16-1:0] M_state_rb_read;
  reg [16-1:0] M_state_alu_output;
  fsm_backup_5 state (
    .clk(clk),
    .rst(rst),
    .clear(M_state_clear),
    .alphabet_pressed(M_state_alphabet_pressed),
    .check_ans_pressed(M_state_check_ans_pressed),
    .ra_read(M_state_ra_read),
    .rb_read(M_state_rb_read),
    .alu_output(M_state_alu_output),
    .we(M_state_we),
    .asel(M_state_asel),
    .bsel(M_state_bsel),
    .alufn(M_state_alufn),
    .ra_write(M_state_ra_write),
    .rb_write(M_state_rb_write),
    .ra_address(M_state_ra_address),
    .rb_address(M_state_rb_address),
    .write_address(M_state_write_address),
    .wdsel(M_state_wdsel)
  );
  wire [5-1:0] M_alphabet_encoding_out;
  buttons_controller_6 alphabet_encoding (
    .clk(clk),
    .rst(rst),
    .alphabet_input(alphabet_button),
    .is_pressed(is_pressed),
    .out(M_alphabet_encoding_out)
  );
  wire [1-1:0] M_matrix_decoder1_data_out;
  reg [7-1:0] M_matrix_decoder1_letter_address;
  matrix_7 matrix_decoder1 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix_decoder1_letter_address),
    .data_out(M_matrix_decoder1_data_out)
  );
  wire [1-1:0] M_matrix_decoder2_data_out;
  reg [7-1:0] M_matrix_decoder2_letter_address;
  matrix_7 matrix_decoder2 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix_decoder2_letter_address),
    .data_out(M_matrix_decoder2_data_out)
  );
  wire [1-1:0] M_matrix_decoder3_data_out;
  reg [7-1:0] M_matrix_decoder3_letter_address;
  matrix_7 matrix_decoder3 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix_decoder3_letter_address),
    .data_out(M_matrix_decoder3_data_out)
  );
  wire [1-1:0] M_matrix_decoder4_data_out;
  reg [7-1:0] M_matrix_decoder4_letter_address;
  matrix_7 matrix_decoder4 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix_decoder4_letter_address),
    .data_out(M_matrix_decoder4_data_out)
  );
  wire [1-1:0] M_matrix_decoder5_data_out;
  reg [7-1:0] M_matrix_decoder5_letter_address;
  matrix_7 matrix_decoder5 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix_decoder5_letter_address),
    .data_out(M_matrix_decoder5_data_out)
  );
  wire [1-1:0] M_matrix_decoder6_data_out;
  reg [7-1:0] M_matrix_decoder6_letter_address;
  matrix_7 matrix_decoder6 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix_decoder6_letter_address),
    .data_out(M_matrix_decoder6_data_out)
  );
  wire [1-1:0] M_matrix_decoder7_data_out;
  reg [7-1:0] M_matrix_decoder7_letter_address;
  matrix_7 matrix_decoder7 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix_decoder7_letter_address),
    .data_out(M_matrix_decoder7_data_out)
  );
  wire [1-1:0] M_matrix_decoder8_data_out;
  reg [7-1:0] M_matrix_decoder8_letter_address;
  matrix_7 matrix_decoder8 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix_decoder8_letter_address),
    .data_out(M_matrix_decoder8_data_out)
  );
  
  always @* begin
    M_alu_alufn = M_state_alufn;
    M_alu_a = M_state_ra_write;
    M_alu_b = M_state_rb_write;
    M_regfile_data = M_state_ra_write;
    M_regfile_write_address = M_state_write_address;
    M_regfile_we = M_state_we;
    M_regfile_read_address_a = M_state_ra_address;
    M_regfile_read_address_b = M_state_rb_address;
    M_regfile_recall = recall;
    M_state_ra_read = M_regfile_out_a;
    M_state_rb_read = M_regfile_out_b;
    M_state_alu_output = M_alu_alu;
    M_state_check_ans_pressed = check_button;
    M_state_alphabet_pressed = M_alphabet_encoding_out;
    M_state_clear = clear;
    M_state_alu_output = M_alu_alu;
    M_matrix_decoder1_letter_address = M_regfile_display_top[0+6-:7];
    M_matrix_decoder2_letter_address = M_regfile_display_top[7+6-:7];
    M_matrix_decoder3_letter_address = M_regfile_display_top[14+6-:7];
    M_matrix_decoder4_letter_address = M_regfile_display_top[21+6-:7];
    M_matrix_decoder5_letter_address = M_regfile_display_bot[0+6-:7];
    M_matrix_decoder6_letter_address = M_regfile_display_bot[7+6-:7];
    M_matrix_decoder7_letter_address = M_regfile_display_bot[14+6-:7];
    M_matrix_decoder8_letter_address = M_regfile_display_bot[21+6-:7];
    display_top[0+0-:1] = M_matrix_decoder1_data_out;
    display_top[1+0-:1] = M_matrix_decoder2_data_out;
    display_top[2+0-:1] = M_matrix_decoder3_data_out;
    display_top[3+0-:1] = M_matrix_decoder4_data_out;
    display_bot[0+0-:1] = M_matrix_decoder5_data_out;
    display_bot[1+0-:1] = M_matrix_decoder6_data_out;
    display_bot[2+0-:1] = M_matrix_decoder7_data_out;
    display_bot[3+0-:1] = M_matrix_decoder8_data_out;
  end
endmodule
