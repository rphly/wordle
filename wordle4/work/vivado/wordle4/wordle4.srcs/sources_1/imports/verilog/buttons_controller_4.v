/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module buttons_controller_4 (
    input clk,
    input rst,
    input a,
    input b,
    input c,
    input d,
    input e,
    input f,
    input g,
    input h,
    input i,
    input j,
    input k,
    input l,
    input m,
    input n,
    input o,
    input p,
    input q,
    input r,
    input s,
    input t,
    input u,
    input v,
    input w,
    input x,
    input y,
    input z,
    output reg is_pressed,
    output reg [15:0] out
  );
  
  
  
  wire [1-1:0] M_a__out;
  button_12 a_ (
    .clk(clk),
    .button_input(a),
    .out(M_a__out)
  );
  wire [1-1:0] M_b__out;
  button_12 b_ (
    .clk(clk),
    .button_input(b),
    .out(M_b__out)
  );
  wire [1-1:0] M_c__out;
  button_12 c_ (
    .clk(clk),
    .button_input(c),
    .out(M_c__out)
  );
  wire [1-1:0] M_d__out;
  button_12 d_ (
    .clk(clk),
    .button_input(d),
    .out(M_d__out)
  );
  wire [1-1:0] M_e__out;
  button_12 e_ (
    .clk(clk),
    .button_input(e),
    .out(M_e__out)
  );
  wire [1-1:0] M_f__out;
  button_12 f_ (
    .clk(clk),
    .button_input(f),
    .out(M_f__out)
  );
  wire [1-1:0] M_g__out;
  button_12 g_ (
    .clk(clk),
    .button_input(g),
    .out(M_g__out)
  );
  wire [1-1:0] M_h__out;
  button_12 h_ (
    .clk(clk),
    .button_input(h),
    .out(M_h__out)
  );
  wire [1-1:0] M_i__out;
  button_12 i_ (
    .clk(clk),
    .button_input(i),
    .out(M_i__out)
  );
  wire [1-1:0] M_j__out;
  button_12 j_ (
    .clk(clk),
    .button_input(j),
    .out(M_j__out)
  );
  wire [1-1:0] M_k__out;
  button_12 k_ (
    .clk(clk),
    .button_input(k),
    .out(M_k__out)
  );
  wire [1-1:0] M_l__out;
  button_12 l_ (
    .clk(clk),
    .button_input(l),
    .out(M_l__out)
  );
  wire [1-1:0] M_m__out;
  button_12 m_ (
    .clk(clk),
    .button_input(m),
    .out(M_m__out)
  );
  wire [1-1:0] M_n__out;
  button_12 n_ (
    .clk(clk),
    .button_input(n),
    .out(M_n__out)
  );
  wire [1-1:0] M_o__out;
  button_12 o_ (
    .clk(clk),
    .button_input(o),
    .out(M_o__out)
  );
  wire [1-1:0] M_p__out;
  button_12 p_ (
    .clk(clk),
    .button_input(p),
    .out(M_p__out)
  );
  wire [1-1:0] M_q__out;
  button_12 q_ (
    .clk(clk),
    .button_input(q),
    .out(M_q__out)
  );
  wire [1-1:0] M_r__out;
  button_12 r_ (
    .clk(clk),
    .button_input(r),
    .out(M_r__out)
  );
  wire [1-1:0] M_s__out;
  button_12 s_ (
    .clk(clk),
    .button_input(s),
    .out(M_s__out)
  );
  wire [1-1:0] M_t__out;
  button_12 t_ (
    .clk(clk),
    .button_input(t),
    .out(M_t__out)
  );
  wire [1-1:0] M_u__out;
  button_12 u_ (
    .clk(clk),
    .button_input(u),
    .out(M_u__out)
  );
  wire [1-1:0] M_v__out;
  button_12 v_ (
    .clk(clk),
    .button_input(v),
    .out(M_v__out)
  );
  wire [1-1:0] M_w__out;
  button_12 w_ (
    .clk(clk),
    .button_input(w),
    .out(M_w__out)
  );
  wire [1-1:0] M_x__out;
  button_12 x_ (
    .clk(clk),
    .button_input(x),
    .out(M_x__out)
  );
  wire [1-1:0] M_y__out;
  button_12 y_ (
    .clk(clk),
    .button_input(y),
    .out(M_y__out)
  );
  wire [1-1:0] M_z__out;
  button_12 z_ (
    .clk(clk),
    .button_input(z),
    .out(M_z__out)
  );
  
  always @* begin
    if (M_a__out) begin
      out = 1'h1;
      is_pressed = 1'h1;
    end else begin
      if (M_b__out) begin
        out = 2'h2;
        is_pressed = 1'h1;
      end else begin
        if (M_c__out) begin
          out = 2'h3;
          is_pressed = 1'h1;
        end else begin
          if (M_d__out) begin
            out = 3'h4;
            is_pressed = 1'h1;
          end else begin
            if (M_e__out) begin
              out = 3'h5;
              is_pressed = 1'h1;
            end else begin
              if (M_f__out) begin
                out = 3'h6;
                is_pressed = 1'h1;
              end else begin
                if (M_g__out) begin
                  out = 3'h7;
                  is_pressed = 1'h1;
                end else begin
                  if (M_h__out) begin
                    out = 4'h8;
                    is_pressed = 1'h1;
                  end else begin
                    if (M_i__out) begin
                      out = 4'h9;
                      is_pressed = 1'h1;
                    end else begin
                      if (M_j__out) begin
                        out = 4'ha;
                        is_pressed = 1'h1;
                      end else begin
                        if (M_k__out) begin
                          out = 4'hb;
                          is_pressed = 1'h1;
                        end else begin
                          if (M_l__out) begin
                            out = 4'hc;
                            is_pressed = 1'h1;
                          end else begin
                            if (M_m__out) begin
                              out = 4'hd;
                              is_pressed = 1'h1;
                            end else begin
                              if (M_n__out) begin
                                out = 4'he;
                                is_pressed = 1'h1;
                              end else begin
                                if (M_o__out) begin
                                  out = 4'hf;
                                  is_pressed = 1'h1;
                                end else begin
                                  if (M_p__out) begin
                                    out = 5'h10;
                                    is_pressed = 1'h1;
                                  end else begin
                                    if (M_q__out) begin
                                      out = 5'h11;
                                      is_pressed = 1'h1;
                                    end else begin
                                      if (M_r__out) begin
                                        out = 5'h12;
                                        is_pressed = 1'h1;
                                      end else begin
                                        if (M_s__out) begin
                                          out = 5'h13;
                                          is_pressed = 1'h1;
                                        end else begin
                                          if (M_t__out) begin
                                            out = 5'h14;
                                            is_pressed = 1'h1;
                                          end else begin
                                            if (M_u__out) begin
                                              out = 5'h15;
                                              is_pressed = 1'h1;
                                            end else begin
                                              if (M_v__out) begin
                                                out = 5'h16;
                                                is_pressed = 1'h1;
                                              end else begin
                                                if (M_w__out) begin
                                                  out = 5'h17;
                                                  is_pressed = 1'h1;
                                                end else begin
                                                  if (M_x__out) begin
                                                    out = 5'h18;
                                                    is_pressed = 1'h1;
                                                  end else begin
                                                    if (M_y__out) begin
                                                      out = 5'h19;
                                                      is_pressed = 1'h1;
                                                    end else begin
                                                      if (M_z__out) begin
                                                        out = 5'h1a;
                                                        is_pressed = 1'h1;
                                                      end else begin
                                                        out = 16'h0000;
                                                        is_pressed = 1'h0;
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
endmodule
