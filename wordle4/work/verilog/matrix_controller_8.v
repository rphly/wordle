/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module matrix_controller_8 (
    input clk,
    input rst,
    input [2:0] update,
    input [4:0] matrix1_letter_address,
    input [4:0] matrix2_letter_address,
    input [4:0] matrix3_letter_address,
    input [4:0] matrix4_letter_address,
    output reg outmatrix1,
    output reg outmatrix2,
    output reg outmatrix3,
    output reg outmatrix4,
    output reg [15:0] debugger,
    output reg [15:0] debugger2
  );
  
  
  
  reg [4:0] M_matrix1_letter_address_dff_d, M_matrix1_letter_address_dff_q = 1'h0;
  reg [4:0] M_matrix2_letter_address_dff_d, M_matrix2_letter_address_dff_q = 1'h0;
  reg [4:0] M_matrix3_letter_address_dff_d, M_matrix3_letter_address_dff_q = 1'h0;
  reg [4:0] M_matrix4_letter_address_dff_d, M_matrix4_letter_address_dff_q = 1'h0;
  wire [1-1:0] M_matrix1_data_out;
  wire [16-1:0] M_matrix1_debugger;
  reg [5-1:0] M_matrix1_letter_address;
  matrix_14 matrix1 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix1_letter_address),
    .data_out(M_matrix1_data_out),
    .debugger(M_matrix1_debugger)
  );
  wire [1-1:0] M_matrix2_data_out;
  wire [16-1:0] M_matrix2_debugger;
  reg [5-1:0] M_matrix2_letter_address;
  matrix_14 matrix2 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix2_letter_address),
    .data_out(M_matrix2_data_out),
    .debugger(M_matrix2_debugger)
  );
  wire [1-1:0] M_matrix3_data_out;
  wire [16-1:0] M_matrix3_debugger;
  reg [5-1:0] M_matrix3_letter_address;
  matrix_14 matrix3 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix3_letter_address),
    .data_out(M_matrix3_data_out),
    .debugger(M_matrix3_debugger)
  );
  wire [1-1:0] M_matrix4_data_out;
  wire [16-1:0] M_matrix4_debugger;
  reg [5-1:0] M_matrix4_letter_address;
  matrix_14 matrix4 (
    .clk(clk),
    .rst(rst),
    .letter_address(M_matrix4_letter_address),
    .data_out(M_matrix4_data_out),
    .debugger(M_matrix4_debugger)
  );
  
  always @* begin
    M_matrix3_letter_address_dff_d = M_matrix3_letter_address_dff_q;
    M_matrix4_letter_address_dff_d = M_matrix4_letter_address_dff_q;
    M_matrix2_letter_address_dff_d = M_matrix2_letter_address_dff_q;
    M_matrix1_letter_address_dff_d = M_matrix1_letter_address_dff_q;
    
    outmatrix1 = M_matrix1_data_out;
    outmatrix2 = M_matrix2_data_out;
    outmatrix3 = M_matrix3_data_out;
    outmatrix4 = M_matrix4_data_out;
    M_matrix1_letter_address = M_matrix1_letter_address_dff_q;
    M_matrix2_letter_address = M_matrix2_letter_address_dff_q;
    M_matrix3_letter_address = M_matrix3_letter_address_dff_q;
    M_matrix4_letter_address = M_matrix4_letter_address_dff_q;
    debugger = M_matrix1_debugger;
    debugger2 = M_matrix2_debugger;
    
    case (update)
      3'h1: begin
        M_matrix1_letter_address_dff_d = matrix1_letter_address;
      end
      3'h2: begin
        M_matrix2_letter_address_dff_d = matrix2_letter_address;
      end
      3'h3: begin
        M_matrix3_letter_address_dff_d = matrix3_letter_address;
      end
      3'h4: begin
        M_matrix4_letter_address_dff_d = matrix4_letter_address;
      end
      3'h5: begin
        M_matrix1_letter_address_dff_d = matrix1_letter_address;
        M_matrix2_letter_address_dff_d = matrix2_letter_address;
        M_matrix3_letter_address_dff_d = matrix3_letter_address;
        M_matrix4_letter_address_dff_d = matrix4_letter_address;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_matrix1_letter_address_dff_q <= M_matrix1_letter_address_dff_d;
    M_matrix2_letter_address_dff_q <= M_matrix2_letter_address_dff_d;
    M_matrix3_letter_address_dff_q <= M_matrix3_letter_address_dff_d;
    M_matrix4_letter_address_dff_q <= M_matrix4_letter_address_dff_d;
  end
  
endmodule
