/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_backup_5 (
    input clk,
    input rst,
    input clear,
    input [4:0] alphabet_pressed,
    input check_ans_pressed,
    input [15:0] ra_read,
    input [15:0] rb_read,
    input [15:0] alu_output,
    output reg we,
    output reg [3:0] asel,
    output reg [3:0] bsel,
    output reg [5:0] alufn,
    output reg [15:0] ra_write,
    output reg [15:0] rb_write,
    output reg [4:0] ra_address,
    output reg [4:0] rb_address,
    output reg [4:0] write_address,
    output reg [4:0] wdsel
  );
  
  
  
  localparam IDLE_game_fsm = 7'd0;
  localparam SET_CORRECT_WORD_game_fsm = 7'd1;
  localparam G1L1_game_fsm = 7'd2;
  localparam G1L2_game_fsm = 7'd3;
  localparam G1L3_game_fsm = 7'd4;
  localparam G1L4_game_fsm = 7'd5;
  localparam CHECKONE_L1C1_game_fsm = 7'd6;
  localparam CHECKONE_L1C2_game_fsm = 7'd7;
  localparam CHECKONE_L1C3_game_fsm = 7'd8;
  localparam CHECKONE_L1C4_game_fsm = 7'd9;
  localparam CHECKONE_L2C1_game_fsm = 7'd10;
  localparam CHECKONE_L2C2_game_fsm = 7'd11;
  localparam CHECKONE_L2C3_game_fsm = 7'd12;
  localparam CHECKONE_L2C4_game_fsm = 7'd13;
  localparam CHECKONE_L3C1_game_fsm = 7'd14;
  localparam CHECKONE_L3C2_game_fsm = 7'd15;
  localparam CHECKONE_L3C3_game_fsm = 7'd16;
  localparam CHECKONE_L3C4_game_fsm = 7'd17;
  localparam CHECKONE_L4C1_game_fsm = 7'd18;
  localparam CHECKONE_L4C2_game_fsm = 7'd19;
  localparam CHECKONE_L4C3_game_fsm = 7'd20;
  localparam CHECKONE_L4C4_game_fsm = 7'd21;
  localparam G2L1_game_fsm = 7'd22;
  localparam G2L2_game_fsm = 7'd23;
  localparam G2L3_game_fsm = 7'd24;
  localparam G2L4_game_fsm = 7'd25;
  localparam CHECKTWO_L1C1_game_fsm = 7'd26;
  localparam CHECKTWO_L1C2_game_fsm = 7'd27;
  localparam CHECKTWO_L1C3_game_fsm = 7'd28;
  localparam CHECKTWO_L1C4_game_fsm = 7'd29;
  localparam CHECKTWO_L2C1_game_fsm = 7'd30;
  localparam CHECKTWO_L2C2_game_fsm = 7'd31;
  localparam CHECKTWO_L2C3_game_fsm = 7'd32;
  localparam CHECKTWO_L2C4_game_fsm = 7'd33;
  localparam CHECKTWO_L3C1_game_fsm = 7'd34;
  localparam CHECKTWO_L3C2_game_fsm = 7'd35;
  localparam CHECKTWO_L3C3_game_fsm = 7'd36;
  localparam CHECKTWO_L3C4_game_fsm = 7'd37;
  localparam CHECKTWO_L4C1_game_fsm = 7'd38;
  localparam CHECKTWO_L4C2_game_fsm = 7'd39;
  localparam CHECKTWO_L4C3_game_fsm = 7'd40;
  localparam CHECKTWO_L4C4_game_fsm = 7'd41;
  localparam G3L1_game_fsm = 7'd42;
  localparam G3L2_game_fsm = 7'd43;
  localparam G3L3_game_fsm = 7'd44;
  localparam G3L4_game_fsm = 7'd45;
  localparam CHECKTHREE_L1C1_game_fsm = 7'd46;
  localparam CHECKTHREE_L1C2_game_fsm = 7'd47;
  localparam CHECKTHREE_L1C3_game_fsm = 7'd48;
  localparam CHECKTHREE_L1C4_game_fsm = 7'd49;
  localparam CHECKTHREE_L2C1_game_fsm = 7'd50;
  localparam CHECKTHREE_L2C2_game_fsm = 7'd51;
  localparam CHECKTHREE_L2C3_game_fsm = 7'd52;
  localparam CHECKTHREE_L2C4_game_fsm = 7'd53;
  localparam CHECKTHREE_L3C1_game_fsm = 7'd54;
  localparam CHECKTHREE_L3C2_game_fsm = 7'd55;
  localparam CHECKTHREE_L3C3_game_fsm = 7'd56;
  localparam CHECKTHREE_L3C4_game_fsm = 7'd57;
  localparam CHECKTHREE_L4C1_game_fsm = 7'd58;
  localparam CHECKTHREE_L4C2_game_fsm = 7'd59;
  localparam CHECKTHREE_L4C3_game_fsm = 7'd60;
  localparam CHECKTHREE_L4C4_game_fsm = 7'd61;
  localparam G4L1_game_fsm = 7'd62;
  localparam G4L2_game_fsm = 7'd63;
  localparam G4L3_game_fsm = 7'd64;
  localparam G4L4_game_fsm = 7'd65;
  localparam CHECKFOUR_L1C1_game_fsm = 7'd66;
  localparam CHECKFOUR_L1C2_game_fsm = 7'd67;
  localparam CHECKFOUR_L1C3_game_fsm = 7'd68;
  localparam CHECKFOUR_L1C4_game_fsm = 7'd69;
  localparam CHECKFOUR_L2C1_game_fsm = 7'd70;
  localparam CHECKFOUR_L2C2_game_fsm = 7'd71;
  localparam CHECKFOUR_L2C3_game_fsm = 7'd72;
  localparam CHECKFOUR_L2C4_game_fsm = 7'd73;
  localparam CHECKFOUR_L3C1_game_fsm = 7'd74;
  localparam CHECKFOUR_L3C2_game_fsm = 7'd75;
  localparam CHECKFOUR_L3C3_game_fsm = 7'd76;
  localparam CHECKFOUR_L3C4_game_fsm = 7'd77;
  localparam CHECKFOUR_L4C1_game_fsm = 7'd78;
  localparam CHECKFOUR_L4C2_game_fsm = 7'd79;
  localparam CHECKFOUR_L4C3_game_fsm = 7'd80;
  localparam CHECKFOUR_L4C4_game_fsm = 7'd81;
  localparam WIN_CONDITION_game_fsm = 7'd82;
  localparam WIN_game_fsm = 7'd83;
  
  reg [6:0] M_game_fsm_d, M_game_fsm_q = IDLE_game_fsm;
  
  integer addc;
  integer cmpeqc;
  integer store;
  integer win_cond;
  integer i;
  integer j;
  integer k;
  integer guess1L1;
  integer guess1L2;
  integer guess1L3;
  integer guess1L4;
  integer guess2L1;
  integer guess2L2;
  integer guess2L3;
  integer guess2L4;
  integer guess3L1;
  integer guess3L2;
  integer guess3L3;
  integer guess3L4;
  integer guess4L1;
  integer guess4L2;
  integer guess4L3;
  integer guess4L4;
  integer correctL1;
  integer correctL2;
  integer correctL3;
  integer correctL4;
  integer inputL1;
  integer inputL2;
  integer inputL3;
  integer inputL4;
  integer zero;
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    we = 1'h0;
    asel = 4'h0;
    bsel = 4'h0;
    ra_write = 1'h0;
    rb_write = 1'h0;
    alufn = 6'h00;
    write_address = 5'h1f;
    ra_address = 1'h0;
    rb_address = 1'h0;
    write_address = 1'h0;
    wdsel = 1'h0;
    addc = 17'h1adb0;
    cmpeqc = 17'h1870e;
    store = 14'h2af9;
    win_cond = 1'h0;
    i = 1'h0;
    j = 1'h0;
    k = 1'h0;
    guess1L1 = 5'h00;
    guess1L2 = 5'h01;
    guess1L3 = 5'h02;
    guess1L4 = 5'h03;
    guess2L1 = 5'h04;
    guess2L2 = 5'h05;
    guess2L3 = 5'h06;
    guess2L4 = 5'h07;
    guess3L1 = 5'h08;
    guess3L2 = 5'h09;
    guess3L3 = 5'h0a;
    guess3L4 = 5'h0b;
    guess4L1 = 5'h0c;
    guess4L2 = 5'h0d;
    guess4L3 = 5'h0e;
    guess4L4 = 5'h0f;
    correctL1 = 5'h17;
    correctL2 = 5'h18;
    correctL3 = 5'h19;
    correctL4 = 5'h1a;
    inputL1 = 5'h10;
    inputL2 = 5'h11;
    inputL3 = 5'h12;
    inputL4 = 5'h13;
    zero = 5'h1f;
    if (rst) begin
      M_game_fsm_d = SET_CORRECT_WORD_game_fsm;
    end else begin
      
      case (M_game_fsm_q)
        G1L1_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = zero;
          rb_write = 1'h0;
          write_address = inputL1;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
            M_game_fsm_d = G1L2_game_fsm;
          end
          if (clear) begin
            M_game_fsm_d = G1L1_game_fsm;
          end
        end
        G1L2_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = zero;
          rb_write = 1'h0;
          write_address = inputL2;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
            M_game_fsm_d = G1L3_game_fsm;
          end
          if (clear) begin
            M_game_fsm_d = G1L1_game_fsm;
          end
        end
        G1L3_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = zero;
          rb_write = 1'h0;
          write_address = inputL3;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
            M_game_fsm_d = G1L4_game_fsm;
          end
          if (clear) begin
            M_game_fsm_d = G1L1_game_fsm;
          end
        end
        G1L4_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = 4'h0;
          rb_write = 1'h0;
          write_address = inputL4;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
          end
          if (clear) begin
            M_game_fsm_d = G1L1_game_fsm;
          end
          if (check_ans_pressed) begin
            M_game_fsm_d = CHECKONE_L1C1_game_fsm;
          end
        end
        CHECKONE_L1C1_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL1;
          rb_address = correctL1;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L1;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L2C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L1C2_game_fsm;
          end
        end
        CHECKONE_L1C2_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL1;
          rb_address = correctL2;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L1;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L2C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L1C3_game_fsm;
          end
        end
        CHECKONE_L1C3_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL1;
          rb_address = correctL3;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L1;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L2C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L1C4_game_fsm;
          end
        end
        CHECKONE_L1C4_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL1;
          rb_address = correctL4;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L1;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L2C1_game_fsm;
          end else begin
            we = 1'h1;
            write_address = guess1L1;
            ra_write = {1'h0, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L2C1_game_fsm;
          end
        end
        CHECKONE_L2C1_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL2;
          rb_address = correctL1;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L2;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L2C2_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L2C2_game_fsm;
          end
        end
        CHECKONE_L2C2_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL2;
          rb_address = correctL2;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L2;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L3C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L2C3_game_fsm;
          end
        end
        CHECKONE_L2C3_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL2;
          rb_address = correctL3;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L2;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L3C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L2C4_game_fsm;
          end
        end
        CHECKONE_L2C4_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL2;
          rb_address = correctL4;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L2;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L3C1_game_fsm;
          end else begin
            we = 1'h1;
            write_address = guess1L2;
            ra_write = {1'h0, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L3C1_game_fsm;
          end
        end
        CHECKONE_L3C1_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL3;
          rb_address = correctL1;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L3;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L3C2_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L3C2_game_fsm;
          end
        end
        CHECKONE_L3C2_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL3;
          rb_address = correctL2;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L3;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L3C3_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L3C3_game_fsm;
          end
        end
        CHECKONE_L3C3_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL3;
          rb_address = correctL3;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L3;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L3C4_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L2C4_game_fsm;
          end
        end
        CHECKONE_L3C4_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL3;
          rb_address = correctL4;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L2;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L4C1_game_fsm;
          end else begin
            we = 1'h1;
            write_address = guess1L2;
            ra_write = {1'h0, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L4C1_game_fsm;
          end
        end
        CHECKONE_L4C1_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL4;
          rb_address = correctL1;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L4;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L4C2_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L4C2_game_fsm;
          end
        end
        CHECKONE_L4C2_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL4;
          rb_address = correctL2;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L4;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L4C3_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L4C3_game_fsm;
          end
        end
        CHECKONE_L4C3_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL4;
          rb_address = correctL3;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L4;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKONE_L3C4_game_fsm;
          end else begin
            M_game_fsm_d = CHECKONE_L3C4_game_fsm;
          end
        end
        CHECKONE_L4C4_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL4;
          rb_address = correctL4;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess1L4;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = G2L1_game_fsm;
          end else begin
            we = 1'h1;
            write_address = guess1L4;
            ra_write = {1'h0, alphabet_pressed};
            M_game_fsm_d = G2L1_game_fsm;
          end
        end
        G2L1_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = zero;
          rb_write = 1'h0;
          write_address = inputL1;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
            M_game_fsm_d = G2L2_game_fsm;
          end
          if (clear) begin
            M_game_fsm_d = G2L1_game_fsm;
          end
        end
        G2L2_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = zero;
          rb_write = 1'h0;
          write_address = inputL2;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
            M_game_fsm_d = G2L3_game_fsm;
          end
          if (clear) begin
            M_game_fsm_d = G2L1_game_fsm;
          end
        end
        G2L3_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = zero;
          rb_write = 1'h0;
          write_address = inputL3;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
            M_game_fsm_d = G2L4_game_fsm;
          end
          if (clear) begin
            M_game_fsm_d = G2L1_game_fsm;
          end
        end
        G2L4_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = 4'h0;
          rb_write = 1'h0;
          write_address = inputL4;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
          end
          if (clear) begin
            M_game_fsm_d = G2L1_game_fsm;
          end
          if (check_ans_pressed) begin
            M_game_fsm_d = CHECKTWO_L1C1_game_fsm;
          end
        end
        CHECKTWO_L1C1_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL1;
          rb_address = correctL1;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L1;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L2C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L1C2_game_fsm;
          end
        end
        CHECKTWO_L1C2_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL1;
          rb_address = correctL2;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L1;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L2C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L1C3_game_fsm;
          end
        end
        CHECKTWO_L1C3_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL1;
          rb_address = correctL3;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L1;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L2C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L1C4_game_fsm;
          end
        end
        CHECKTWO_L1C4_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL1;
          rb_address = correctL4;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L1;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L2C1_game_fsm;
          end else begin
            we = 1'h1;
            write_address = guess2L1;
            ra_write = {1'h0, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L2C1_game_fsm;
          end
        end
        CHECKTWO_L2C1_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL2;
          rb_address = correctL1;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L2;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L2C2_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L2C2_game_fsm;
          end
        end
        CHECKTWO_L2C2_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL2;
          rb_address = correctL2;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L2;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L3C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L2C3_game_fsm;
          end
        end
        CHECKTWO_L2C3_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL2;
          rb_address = correctL3;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L2;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L3C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L2C4_game_fsm;
          end
        end
        CHECKTWO_L2C4_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL2;
          rb_address = correctL4;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L2;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L3C1_game_fsm;
          end else begin
            we = 1'h1;
            write_address = guess2L2;
            ra_write = {1'h0, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L3C1_game_fsm;
          end
        end
        CHECKTWO_L3C1_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL3;
          rb_address = correctL1;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L3;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L3C2_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L3C2_game_fsm;
          end
        end
        CHECKTWO_L3C2_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL3;
          rb_address = correctL2;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L3;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L3C3_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L3C3_game_fsm;
          end
        end
        CHECKTWO_L3C3_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL3;
          rb_address = correctL3;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L3;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L3C4_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L2C4_game_fsm;
          end
        end
        CHECKTWO_L3C4_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL3;
          rb_address = correctL4;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L2;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L4C1_game_fsm;
          end else begin
            we = 1'h1;
            write_address = guess2L2;
            ra_write = {1'h0, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L4C1_game_fsm;
          end
        end
        CHECKTWO_L4C1_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL4;
          rb_address = correctL1;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L4;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L4C2_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L4C2_game_fsm;
          end
        end
        CHECKTWO_L4C2_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL4;
          rb_address = correctL2;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L4;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L4C3_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L4C3_game_fsm;
          end
        end
        CHECKTWO_L4C3_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL4;
          rb_address = correctL3;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L4;
            ra_write = {4'hb, alphabet_pressed};
            M_game_fsm_d = CHECKTWO_L3C4_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTWO_L3C4_game_fsm;
          end
        end
        CHECKTWO_L4C4_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL4;
          rb_address = correctL4;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess2L4;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = G3L1_game_fsm;
          end else begin
            we = 1'h1;
            write_address = guess2L4;
            ra_write = {1'h0, alphabet_pressed};
            M_game_fsm_d = G3L1_game_fsm;
          end
        end
        G3L1_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = zero;
          rb_write = 1'h0;
          write_address = inputL1;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
            M_game_fsm_d = G3L2_game_fsm;
          end
          if (clear) begin
            M_game_fsm_d = G3L1_game_fsm;
          end
        end
        G3L2_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = zero;
          rb_write = 1'h0;
          write_address = inputL2;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
            M_game_fsm_d = G3L3_game_fsm;
          end
          if (clear) begin
            M_game_fsm_d = G3L1_game_fsm;
          end
        end
        G3L3_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = zero;
          rb_write = 1'h0;
          write_address = inputL3;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
            M_game_fsm_d = G3L4_game_fsm;
          end
          if (clear) begin
            M_game_fsm_d = G3L1_game_fsm;
          end
        end
        G3L4_game_fsm: begin
          alufn = addc;
          asel = 4'h0;
          bsel = 4'h0;
          rb_write = 1'h0;
          write_address = inputL4;
          if (alphabet_pressed) begin
            we = 1'h1;
            ra_write = alphabet_pressed;
          end
          if (clear) begin
            M_game_fsm_d = G3L1_game_fsm;
          end
          if (check_ans_pressed) begin
            M_game_fsm_d = CHECKTHREE_L1C1_game_fsm;
          end
        end
        CHECKTHREE_L1C1_game_fsm: begin
          alufn = cmpeqc;
          asel = 4'h0;
          bsel = 4'h0;
          ra_address = inputL1;
          rb_address = correctL1;
          if (ra_read == rb_read) begin
            we = 1'h1;
            write_address = guess3L1;
            ra_write = {1'h1, alphabet_pressed};
            M_game_fsm_d = CHECKTHREE_L2C1_game_fsm;
          end else begin
            M_game_fsm_d = CHECKTHREE_L1C2_game_fsm;
          end
        end
        default: begin
          M_game_fsm_d = G1L1_game_fsm;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    M_game_fsm_q <= M_game_fsm_d;
  end
  
endmodule
