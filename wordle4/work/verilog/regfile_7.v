/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_7 (
    input clk,
    input rst,
    input [4:0] write_address,
    input we,
    input [15:0] data,
    input [4:0] read_address_a,
    input [4:0] read_address_b,
    output reg [15:0] out_a,
    output reg [15:0] out_b
  );
  
  
  
  reg [6:0] M_guess_1_letter_1_d, M_guess_1_letter_1_q = 1'h0;
  reg [6:0] M_guess_1_letter_2_d, M_guess_1_letter_2_q = 1'h0;
  reg [6:0] M_guess_1_letter_3_d, M_guess_1_letter_3_q = 1'h0;
  reg [6:0] M_guess_1_letter_4_d, M_guess_1_letter_4_q = 1'h0;
  reg [6:0] M_guess_2_letter_1_d, M_guess_2_letter_1_q = 1'h0;
  reg [6:0] M_guess_2_letter_2_d, M_guess_2_letter_2_q = 1'h0;
  reg [6:0] M_guess_2_letter_3_d, M_guess_2_letter_3_q = 1'h0;
  reg [6:0] M_guess_2_letter_4_d, M_guess_2_letter_4_q = 1'h0;
  reg [6:0] M_guess_3_letter_1_d, M_guess_3_letter_1_q = 1'h0;
  reg [6:0] M_guess_3_letter_2_d, M_guess_3_letter_2_q = 1'h0;
  reg [6:0] M_guess_3_letter_3_d, M_guess_3_letter_3_q = 1'h0;
  reg [6:0] M_guess_3_letter_4_d, M_guess_3_letter_4_q = 1'h0;
  reg [6:0] M_guess_4_letter_1_d, M_guess_4_letter_1_q = 1'h0;
  reg [6:0] M_guess_4_letter_2_d, M_guess_4_letter_2_q = 1'h0;
  reg [6:0] M_guess_4_letter_3_d, M_guess_4_letter_3_q = 1'h0;
  reg [6:0] M_guess_4_letter_4_d, M_guess_4_letter_4_q = 1'h0;
  reg [4:0] M_input_letter_1_d, M_input_letter_1_q = 1'h0;
  reg [4:0] M_input_letter_2_d, M_input_letter_2_q = 1'h0;
  reg [4:0] M_input_letter_3_d, M_input_letter_3_q = 1'h0;
  reg [4:0] M_input_letter_4_d, M_input_letter_4_q = 1'h0;
  reg [4:0] M_correct_letter_1_d, M_correct_letter_1_q = 1'h0;
  reg [4:0] M_correct_letter_2_d, M_correct_letter_2_q = 1'h0;
  reg [4:0] M_correct_letter_3_d, M_correct_letter_3_q = 1'h0;
  reg [4:0] M_correct_letter_4_d, M_correct_letter_4_q = 1'h0;
  reg [2:0] M_i_d, M_i_q = 1'h0;
  reg [2:0] M_j_d, M_j_q = 1'h0;
  reg [2:0] M_k_d, M_k_q = 1'h0;
  reg [1:0] M_input_ctr_d, M_input_ctr_q = 1'h0;
  reg [2:0] M_num_correct_d, M_num_correct_q = 1'h0;
  reg [0:0] M_zero_d, M_zero_q = 1'h0;
  
  always @* begin
    M_guess_1_letter_1_d = M_guess_1_letter_1_q;
    M_guess_1_letter_2_d = M_guess_1_letter_2_q;
    M_guess_4_letter_1_d = M_guess_4_letter_1_q;
    M_guess_4_letter_2_d = M_guess_4_letter_2_q;
    M_guess_4_letter_3_d = M_guess_4_letter_3_q;
    M_guess_4_letter_4_d = M_guess_4_letter_4_q;
    M_num_correct_d = M_num_correct_q;
    M_guess_3_letter_4_d = M_guess_3_letter_4_q;
    M_zero_d = M_zero_q;
    M_guess_3_letter_3_d = M_guess_3_letter_3_q;
    M_guess_3_letter_2_d = M_guess_3_letter_2_q;
    M_guess_3_letter_1_d = M_guess_3_letter_1_q;
    M_guess_1_letter_3_d = M_guess_1_letter_3_q;
    M_guess_1_letter_4_d = M_guess_1_letter_4_q;
    M_guess_2_letter_4_d = M_guess_2_letter_4_q;
    M_correct_letter_4_d = M_correct_letter_4_q;
    M_input_letter_3_d = M_input_letter_3_q;
    M_input_letter_2_d = M_input_letter_2_q;
    M_i_d = M_i_q;
    M_input_letter_1_d = M_input_letter_1_q;
    M_j_d = M_j_q;
    M_k_d = M_k_q;
    M_input_ctr_d = M_input_ctr_q;
    M_input_letter_4_d = M_input_letter_4_q;
    M_guess_2_letter_1_d = M_guess_2_letter_1_q;
    M_correct_letter_1_d = M_correct_letter_1_q;
    M_guess_2_letter_3_d = M_guess_2_letter_3_q;
    M_correct_letter_3_d = M_correct_letter_3_q;
    M_guess_2_letter_2_d = M_guess_2_letter_2_q;
    M_correct_letter_2_d = M_correct_letter_2_q;
    
    if (we) begin
      
      case (write_address)
        1'h0: begin
          M_guess_1_letter_1_d = data;
        end
        1'h1: begin
          M_guess_1_letter_2_d = data;
        end
        4'ha: begin
          M_guess_1_letter_3_d = data;
        end
        4'hb: begin
          M_guess_1_letter_4_d = data;
        end
        7'h64: begin
          M_guess_2_letter_1_d = data;
        end
        7'h65: begin
          M_guess_2_letter_2_d = data;
        end
        7'h6e: begin
          M_guess_2_letter_3_d = data;
        end
        7'h6f: begin
          M_guess_2_letter_4_d = data;
        end
        10'h3e8: begin
          M_guess_3_letter_1_d = data;
        end
        10'h3e9: begin
          M_guess_3_letter_2_d = data;
        end
        10'h3f2: begin
          M_guess_3_letter_3_d = data;
        end
        10'h3f3: begin
          M_guess_3_letter_4_d = data;
        end
        11'h44c: begin
          M_guess_4_letter_1_d = data;
        end
        11'h44d: begin
          M_guess_4_letter_2_d = data;
        end
        11'h456: begin
          M_guess_4_letter_3_d = data;
        end
        11'h457: begin
          M_guess_4_letter_4_d = data;
        end
        14'h2710: begin
          M_input_letter_1_d = data;
        end
        14'h2711: begin
          M_input_letter_2_d = data;
        end
        14'h271a: begin
          M_input_letter_3_d = data;
        end
        14'h271b: begin
          M_input_letter_4_d = data;
        end
        14'h2774: begin
          M_i_d = data;
        end
        14'h2775: begin
          M_j_d = data;
        end
        14'h277e: begin
          M_k_d = data;
        end
        14'h277f: begin
          M_correct_letter_1_d = data;
        end
        14'h2af8: begin
          M_correct_letter_2_d = data;
        end
        14'h2af9: begin
          M_correct_letter_3_d = data;
        end
        14'h2b02: begin
          M_correct_letter_4_d = data;
        end
        14'h2b03: begin
          M_num_correct_d = data;
        end
        14'h2b5c: begin
          M_input_ctr_d = data;
        end
        14'h2b67: begin
          M_zero_d = 1'h0;
        end
      endcase
    end
    
    case (read_address_a)
      1'h0: begin
        out_a = M_guess_1_letter_1_q;
      end
      1'h1: begin
        out_a = M_guess_1_letter_2_q;
      end
      4'ha: begin
        out_a = M_guess_1_letter_3_q;
      end
      4'hb: begin
        out_a = M_guess_1_letter_4_q;
      end
      7'h64: begin
        out_a = M_guess_2_letter_1_q;
      end
      7'h65: begin
        out_a = M_guess_2_letter_2_q;
      end
      7'h6e: begin
        out_a = M_guess_2_letter_3_q;
      end
      7'h6f: begin
        out_a = M_guess_2_letter_4_q;
      end
      10'h3e8: begin
        out_a = M_guess_3_letter_1_q;
      end
      10'h3e9: begin
        out_a = M_guess_3_letter_2_q;
      end
      10'h3f2: begin
        out_a = M_guess_3_letter_3_q;
      end
      10'h3f3: begin
        out_a = M_guess_3_letter_4_q;
      end
      11'h44c: begin
        out_a = M_guess_4_letter_1_q;
      end
      11'h44d: begin
        out_a = M_guess_4_letter_2_q;
      end
      11'h456: begin
        out_a = M_guess_4_letter_3_q;
      end
      11'h457: begin
        out_a = M_guess_4_letter_4_q;
      end
      14'h2710: begin
        out_a = M_input_letter_1_q;
      end
      14'h2711: begin
        out_a = M_input_letter_2_q;
      end
      14'h271a: begin
        out_a = M_input_letter_3_q;
      end
      14'h271b: begin
        out_a = M_input_letter_4_q;
      end
      14'h2774: begin
        out_a = M_i_q;
      end
      14'h2775: begin
        out_a = M_j_q;
      end
      14'h277e: begin
        out_a = M_k_q;
      end
      14'h277f: begin
        out_a = M_correct_letter_1_q;
      end
      14'h2af8: begin
        out_a = M_correct_letter_2_q;
      end
      14'h2af9: begin
        out_a = M_correct_letter_3_q;
      end
      14'h2b02: begin
        out_a = M_correct_letter_4_q;
      end
      14'h2b03: begin
        out_a = M_num_correct_q;
      end
      14'h2b5c: begin
        out_a = M_input_ctr_q;
      end
      14'h2b67: begin
        out_a = M_zero_q;
      end
      default: begin
        out_a = M_zero_q;
      end
    endcase
    
    case (read_address_b)
      1'h0: begin
        out_b = M_guess_1_letter_1_q;
      end
      1'h1: begin
        out_b = M_guess_1_letter_2_q;
      end
      4'ha: begin
        out_b = M_guess_1_letter_3_q;
      end
      4'hb: begin
        out_b = M_guess_1_letter_4_q;
      end
      7'h64: begin
        out_b = M_guess_2_letter_1_q;
      end
      7'h65: begin
        out_b = M_guess_2_letter_2_q;
      end
      7'h6e: begin
        out_b = M_guess_2_letter_3_q;
      end
      7'h6f: begin
        out_b = M_guess_2_letter_4_q;
      end
      10'h3e8: begin
        out_b = M_guess_3_letter_1_q;
      end
      10'h3e9: begin
        out_b = M_guess_3_letter_2_q;
      end
      10'h3f2: begin
        out_b = M_guess_3_letter_3_q;
      end
      10'h3f3: begin
        out_b = M_guess_3_letter_4_q;
      end
      11'h44c: begin
        out_b = M_guess_4_letter_1_q;
      end
      11'h44d: begin
        out_b = M_guess_4_letter_2_q;
      end
      11'h456: begin
        out_b = M_guess_4_letter_3_q;
      end
      11'h457: begin
        out_b = M_guess_4_letter_4_q;
      end
      14'h2710: begin
        out_b = M_input_letter_1_q;
      end
      14'h2711: begin
        out_b = M_input_letter_2_q;
      end
      14'h271a: begin
        out_b = M_input_letter_3_q;
      end
      14'h271b: begin
        out_b = M_input_letter_4_q;
      end
      14'h2774: begin
        out_b = M_i_q;
      end
      14'h2775: begin
        out_b = M_j_q;
      end
      14'h277e: begin
        out_b = M_k_q;
      end
      14'h277f: begin
        out_b = M_correct_letter_1_q;
      end
      14'h2af8: begin
        out_b = M_correct_letter_2_q;
      end
      14'h2af9: begin
        out_b = M_correct_letter_3_q;
      end
      14'h2b02: begin
        out_b = M_correct_letter_4_q;
      end
      14'h2b03: begin
        out_b = M_num_correct_q;
      end
      14'h2b5c: begin
        out_b = M_input_ctr_q;
      end
      14'h2b67: begin
        out_b = M_zero_q;
      end
      default: begin
        out_b = M_zero_q;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_guess_1_letter_1_q <= 1'h0;
      M_guess_1_letter_2_q <= 1'h0;
      M_guess_1_letter_3_q <= 1'h0;
      M_guess_1_letter_4_q <= 1'h0;
      M_guess_2_letter_1_q <= 1'h0;
      M_guess_2_letter_2_q <= 1'h0;
      M_guess_2_letter_3_q <= 1'h0;
      M_guess_2_letter_4_q <= 1'h0;
      M_guess_3_letter_1_q <= 1'h0;
      M_guess_3_letter_2_q <= 1'h0;
      M_guess_3_letter_3_q <= 1'h0;
      M_guess_3_letter_4_q <= 1'h0;
      M_guess_4_letter_1_q <= 1'h0;
      M_guess_4_letter_2_q <= 1'h0;
      M_guess_4_letter_3_q <= 1'h0;
      M_guess_4_letter_4_q <= 1'h0;
      M_input_letter_1_q <= 1'h0;
      M_input_letter_2_q <= 1'h0;
      M_input_letter_3_q <= 1'h0;
      M_input_letter_4_q <= 1'h0;
      M_correct_letter_1_q <= 1'h0;
      M_correct_letter_2_q <= 1'h0;
      M_correct_letter_3_q <= 1'h0;
      M_correct_letter_4_q <= 1'h0;
      M_i_q <= 1'h0;
      M_j_q <= 1'h0;
      M_k_q <= 1'h0;
      M_input_ctr_q <= 1'h0;
      M_num_correct_q <= 1'h0;
      M_zero_q <= 1'h0;
    end else begin
      M_guess_1_letter_1_q <= M_guess_1_letter_1_d;
      M_guess_1_letter_2_q <= M_guess_1_letter_2_d;
      M_guess_1_letter_3_q <= M_guess_1_letter_3_d;
      M_guess_1_letter_4_q <= M_guess_1_letter_4_d;
      M_guess_2_letter_1_q <= M_guess_2_letter_1_d;
      M_guess_2_letter_2_q <= M_guess_2_letter_2_d;
      M_guess_2_letter_3_q <= M_guess_2_letter_3_d;
      M_guess_2_letter_4_q <= M_guess_2_letter_4_d;
      M_guess_3_letter_1_q <= M_guess_3_letter_1_d;
      M_guess_3_letter_2_q <= M_guess_3_letter_2_d;
      M_guess_3_letter_3_q <= M_guess_3_letter_3_d;
      M_guess_3_letter_4_q <= M_guess_3_letter_4_d;
      M_guess_4_letter_1_q <= M_guess_4_letter_1_d;
      M_guess_4_letter_2_q <= M_guess_4_letter_2_d;
      M_guess_4_letter_3_q <= M_guess_4_letter_3_d;
      M_guess_4_letter_4_q <= M_guess_4_letter_4_d;
      M_input_letter_1_q <= M_input_letter_1_d;
      M_input_letter_2_q <= M_input_letter_2_d;
      M_input_letter_3_q <= M_input_letter_3_d;
      M_input_letter_4_q <= M_input_letter_4_d;
      M_correct_letter_1_q <= M_correct_letter_1_d;
      M_correct_letter_2_q <= M_correct_letter_2_d;
      M_correct_letter_3_q <= M_correct_letter_3_d;
      M_correct_letter_4_q <= M_correct_letter_4_d;
      M_i_q <= M_i_d;
      M_j_q <= M_j_d;
      M_k_q <= M_k_d;
      M_input_ctr_q <= M_input_ctr_d;
      M_num_correct_q <= M_num_correct_d;
      M_zero_q <= M_zero_d;
    end
  end
  
endmodule
