module game (
    input clk,  // clock
    input rst,  // reset
    input regfile_out_a[16],
    input regfile_out_b[16],
    input write_one_in,
    input write_zero_in,
    input read_button_in,
    
    output which_matrix,
    output which_letter,

    output regfile_we,
    output regfile_write_address[16],
    output regfile_ra[16],
    output regfile_rb[16], 
    output regfile_data[16],
    output current_state   
  ) {
  
  .clk(clk) {
    fsm game_fsm = {
      IDLE,
      STORE_INPUT,
      UPDATE_MATRIX,
      STORE_ONE,
      STORE_ZERO
    };
  }
  
  const INPUT_CTR = b11100;
  const INPUT_LETTER_1 = b10000;
  
  always {
    // standard setting 
    regfile_we = 0;
    regfile_write_address = 0;
    regfile_ra = 0;
    regfile_rb = 0;
    regfile_data = 2;
    which_matrix = 0;
    which_letter = 0;
    current_state = 2;
    
    if (rst) {
      game_fsm.d = game_fsm.IDLE; 
    } else {
      case(game_fsm.q) {
        game_fsm.IDLE:
          if (write_zero_in) {
            game_fsm.d = game_fsm.STORE_ZERO;
          }
          if (write_one_in) {
            game_fsm.d = game_fsm.STORE_ONE;
          }
          if (read_button_in) {
            game_fsm.d = game_fsm.UPDATE_MATRIX;
          }
          
        game_fsm.STORE_ONE:
          regfile_we = b1;
          regfile_write_address = INPUT_LETTER_1;
          regfile_ra = 16d0;
          regfile_rb = 16d0;
          regfile_data = 16d1;
          current_state = 1;
          game_fsm.d = game_fsm.UPDATE_MATRIX;

        game_fsm.STORE_ZERO:
          regfile_we = 1;
          regfile_write_address = INPUT_LETTER_1;
          regfile_ra = 0;
          regfile_rb = 0;
          regfile_data = 0;
          game_fsm.d = game_fsm.STORE_ZERO;
          
          
        game_fsm.UPDATE_MATRIX:
          regfile_we = b0;
          regfile_ra = INPUT_LETTER_1;
          regfile_rb = INPUT_CTR;
          
          which_letter = regfile_out_a[0];
          which_matrix = regfile_out_b[0];
          game_fsm.d = game_fsm.STORE_ONE;
          current_state = 0;

        default: game_fsm.d = game_fsm.IDLE;
      }
    }
  }
}
