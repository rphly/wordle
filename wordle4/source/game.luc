module game (
    input clk,  // clock
    input rst,  // reset
    input regfile_out_a[16],
    input regfile_out_b[16],
    
    input keyboard_input[5],
    input has_keyboard_input,
    
    input panel_input[16],
    input has_panel_input,
    
    input alu_out[16],
    
    input selected_word[4][5],
    input random_number_out[32],
    
    output which_matrix[5],
    output which_letter[5],

    output regfile_we,
    output regfile_write_address[16],
    output regfile_ra[16],
    output regfile_rb[16], 
    output regfile_data[16],
    output current_state[16],
    output alufn[6],
    output asel[3],
    output bsel[3],
    output words_selector[11],
    
    output bottom_matrix_controller_update[4],
    output bottom_matrix1_letter_address[7],
    output bottom_matrix2_letter_address[7],
    output bottom_matrix3_letter_address[7],
    output bottom_matrix4_letter_address[7],
    
    output top_matrix_controller_update[4],
    output top_matrix1_letter_address[7],
    output top_matrix2_letter_address[7],
    output top_matrix3_letter_address[7],
    output top_matrix4_letter_address[7],
    
    output g_out[5],
    
    output next_random_number,
    output correct_word_out[4][5],
    output debugger1[8],
    output debugger2[8],
    output debugger3[8],
    output correct_word_index[11]
  ) {
  
  .clk(clk) {
     fsm game_fsm = {
    CHECK_IF_FIRST_INPUT,
      SET_OKA_MODE_TO_ZERO,
      RESET_TOP_DISPLAY,
      RESET_BOTTOM_DISPLAY,
      SET_INPUT_CTR_TO_0,
      SET_GUESS_CTR_TO_0,
      SET_NUM_CORRECT_INPUTS_TO_0,
      IDLE,
      RETRIEVE_INPUT_I,
      RETRIEVE_CORRECT_K,
      COMPARE_INPUT_I_WITH_CORRECT_K,
      COMPARE_K_EQUALS_3_AND_INCREMENT,
      CHECK_BUTTON_PRESSED,
      COMPARE_INPUT_CTR_EQUALS_3,
      COMPARE_INPUT_I_WITH_CORRECT_I,
      CLEAR_RESET_BOTTOM_DISPLAY,
      STORE_INPUT,
      INCREMENT_INPUT_CTR,
      PRINT_LETTER_TO_MATRIX,
      SET_I_TO_ZERO,
      SET_K_TO_ZERO,
      COMPARE_POSITIONS_K_AND_I,
      SET_TEMP_GUESS_G_LETTER_I_ADDR_WHITE,
      SET_TEMP_GUESS_G_LETTER_I_ADDR_GREEN,
      SET_TEMP_GUESS_G_LETTER_I_ADDR_YELLOW,
      SET_WHITE_LETTER,
      SET_GREEN_LETTER,
      SET_YELLOW_LETTER,
      SET_TEMP_COLOURED_LETTER_GREEN,
      SET_TEMP_COLOURED_LETTER_YELLOW,
      SET_TEMP_COLOURED_LETTER_WHITE,
      RESET_NUM_CORRECT_INPUTS_TO_0,
      INCREMENT_K,
      INCREMENT_NUM_CORRECT,
      COMPARE_NUM_CORRECT_EQUALS_3,
      COMPARE_I_EQUALS_3_AND_INCREMENT,
      INCREMENT_GUESS_CTR,
      COMPARE_GUESS_CTR_EQUALS_3,
      SHOW_TOP_DISPLAY,
      SHOW_TOP_DISPLAY_2,
      SHOW_TOP_DISPLAY_3,
      SHOW_TOP_DISPLAY_4,
      SET_CORRECT_WORD,
      SET_CORRECT_WORD_2,
      SET_CORRECT_LETTER_1,
      SET_CORRECT_LETTER_2,
      SET_CORRECT_LETTER_3,
      SET_CORRECT_LETTER_4,
      LOSE,
      WIN,
      SHOW_GUESS_ONE,
      SHOW_GUESS_ONE_2,
      SHOW_GUESS_TWO,
      SHOW_GUESS_TWO_2,
      SHOW_GUESS_THREE,
      SHOW_GUESS_THREE_2,
      SHOW_GUESS_FOUR,
      SHOW_GUESS_FOUR_2
    };
  }
  
  const INPUT_CTR = b11100;
  const INPUT_LETTER_1 = b10000;
  const I = b10100;
  const K = b10110;
  const CORRECT_LETTER_1 = b10111;
  const INPUT_I = b11101;
  const CORRECT_K = b11110;
  
  const G = b100000;
  
  const GUESS_1_LETTER_1 = b1000000;
  const GUESS_2_LETTER_1 = b00100;
  const GUESS_3_LETTER_1 = b01000;
  const GUESS_4_LETTER_1 = b01100;
  const GUESS_5_LETTER_1 = b100101;
  const TEMP_GUESS_G_LETTER_I_ADDR = b100001;
  const TEMP_COLOURED_LETTER = b100010;
  
  const NUM_CORRECT = b11011;
  
  const CLEAR_SIGNAL = b11111;
  const CHECK_SIGNAL = b11110;
  const RESTART_SIGNAL = b10101;
  const OKA_MODE = b100100;
  const SHOW_GUESS_ONE = b00001;
  const SHOW_GUESS_TWO = b00100;
  const SHOW_GUESS_THREE = b01000;
  const SHOW_GUESS_FOUR = b01100;
  
  const CORRECT_WORD = b100011;
  
  always {
    debugger1 = 0;
    debugger2 = 0;
    debugger3 = 0;
    // standard setting 
    regfile_we = 0;
    regfile_write_address = 0;
    regfile_ra = 0;
    regfile_rb = 0;
    regfile_data = 0;
    which_matrix = 5d0;
    which_letter = 5d0;
    current_state = 2d0;
    alufn = 00000;
    asel = 0;
    bsel = 0;
    words_selector = 0;
    g_out = 0;
    next_random_number = 0;
    correct_word_index = 0;
    correct_word_out = {5b0, 5b0, 5b0, 5b0};
    
    bottom_matrix_controller_update = 3b0;
    bottom_matrix1_letter_address = 5d0;
    bottom_matrix2_letter_address = 5d0;
    bottom_matrix3_letter_address = 5d0;
    bottom_matrix4_letter_address = 5d0;
    
    top_matrix_controller_update = 3b0;
    top_matrix1_letter_address = 5d0;
    top_matrix2_letter_address = 5d0;
    top_matrix3_letter_address = 5d0;
    top_matrix4_letter_address = 5d0;
    
    if (rst) {
      game_fsm.d = game_fsm.SET_OKA_MODE_TO_ZERO;

    } else {
      case(game_fsm.q) {        
        game_fsm.SET_OKA_MODE_TO_ZERO:
          regfile_write_address = OKA_MODE;
          regfile_data = 0;
          regfile_we = 1;  
          game_fsm.d = game_fsm.SET_GUESS_CTR_TO_0;
        
        game_fsm.SET_GUESS_CTR_TO_0:
          regfile_write_address = G;
          regfile_ra = 0;
          regfile_rb = 0;
          regfile_data = 0;
          regfile_we = 1;  
          game_fsm.d = game_fsm.RESET_NUM_CORRECT_INPUTS_TO_0;
        
        game_fsm.RESET_NUM_CORRECT_INPUTS_TO_0:
          
          regfile_write_address = NUM_CORRECT;
          regfile_ra = 0;
          regfile_rb = 0;
          regfile_data = 0;
          regfile_we = 1;  
          game_fsm.d = game_fsm.RESET_TOP_DISPLAY;
        
        

        // reset inputs sequence
        game_fsm.RESET_TOP_DISPLAY:
          top_matrix_controller_update = 3b101;
          top_matrix1_letter_address = 5d0;
          top_matrix2_letter_address = 5d0;
          top_matrix3_letter_address = 5d0;
          top_matrix4_letter_address = 5d0;
          game_fsm.d = game_fsm.SET_INPUT_CTR_TO_0;
        
          
        game_fsm.SET_INPUT_CTR_TO_0:
          regfile_we = 1;
          regfile_write_address = INPUT_CTR;
          regfile_ra = 0;
          regfile_rb = 0;
          regfile_data = 0;  
          
          game_fsm.d = game_fsm.RESET_BOTTOM_DISPLAY;
        
        game_fsm.RESET_BOTTOM_DISPLAY:
          bottom_matrix_controller_update = 3b101;
          bottom_matrix1_letter_address = 5d0;
          bottom_matrix2_letter_address = 5d0;
          bottom_matrix3_letter_address = 5d0;
          bottom_matrix4_letter_address = 5d0;
          // if first guess first input
          regfile_ra = G;
          regfile_rb = INPUT_CTR;
           if(regfile_out_a == 0 && regfile_out_b == 0){ 
              // if first guess and first input
              top_matrix_controller_update = b1001;
              bottom_matrix_controller_update = b1010;
           }
          game_fsm.d = game_fsm.IDLE;
        
        // IDLE STATE
        game_fsm.IDLE:
          current_state = 0;
          regfile_rb = OKA_MODE;
          next_random_number = 1;
          // if check button press
          if (has_panel_input) {
            // if oka_mode = 1, disallow backtracking >:)
            if (panel_input == CLEAR_SIGNAL) {
              game_fsm.d = game_fsm.SET_INPUT_CTR_TO_0;
            } else if (panel_input == CHECK_SIGNAL) {
              game_fsm.d = game_fsm.CHECK_BUTTON_PRESSED;
            } else if (panel_input == RESTART_SIGNAL) {
              game_fsm.d = game_fsm.SET_OKA_MODE_TO_ZERO;
            } else if (panel_input == OKA_MODE) {
              regfile_write_address = OKA_MODE;
              regfile_data = 1;
              regfile_we = 1;
            } else if (panel_input == SHOW_GUESS_ONE){
              regfile_ra = G;
              if(regfile_out_a > d0 && regfile_out_b == 0){
                game_fsm.d = game_fsm.SHOW_GUESS_ONE;
              }
            }else if (panel_input == SHOW_GUESS_TWO){
              regfile_ra = G;
              if(regfile_out_a > d1 && regfile_out_b == 0){
                game_fsm.d = game_fsm.SHOW_GUESS_TWO;
              }
            }else if (panel_input == SHOW_GUESS_THREE){
              regfile_ra = G;
              if(regfile_out_a > d2 && regfile_out_b == 0){
                game_fsm.d = game_fsm.SHOW_GUESS_THREE;
              }
            }else if (panel_input == SHOW_GUESS_FOUR){
              regfile_ra = G;
              if(regfile_out_a > d3 && regfile_out_b == 0){
                game_fsm.d = game_fsm.SHOW_GUESS_FOUR;
              }
            }
          } else if (has_keyboard_input) {
              regfile_we = 1;
              regfile_ra = INPUT_CTR;
              regfile_write_address = INPUT_LETTER_1 + regfile_out_a; // input ctr is like an offset
              regfile_data = keyboard_input;
              game_fsm.d = game_fsm.CHECK_IF_FIRST_INPUT;
            } else {
              game_fsm.d = game_fsm.IDLE;
            } 
          
          
        game_fsm.CHECK_IF_FIRST_INPUT:
          regfile_ra = G;
          regfile_rb = INPUT_CTR;
         if(regfile_out_a == 0 && regfile_out_b == 0){ 
            // if first guess and first input, select word
              game_fsm.d = game_fsm.SET_CORRECT_WORD;
              
              bottom_matrix_controller_update = 3b101;
              bottom_matrix1_letter_address = 5d0;
              bottom_matrix2_letter_address = 5d0;
              bottom_matrix3_letter_address = 5d0;
              bottom_matrix4_letter_address = 5d0;
              
              top_matrix_controller_update = 3b101;
              top_matrix1_letter_address = 5d0;
              top_matrix2_letter_address = 5d0;
              top_matrix3_letter_address = 5d0;
              top_matrix4_letter_address = 5d0;
            } else {
              game_fsm.d = game_fsm.PRINT_LETTER_TO_MATRIX;
            } 
        
        game_fsm.SET_CORRECT_WORD:
          regfile_write_address = CORRECT_WORD;
          asel = b110;
          bsel = b111;

         if (alu_out == b01) { // regfile_out_a < regfile_out_b 
            // need to translate by -88 / 206
            regfile_data = random_number_out[10:0] - d89; // mini words is 512-306=206 else if full, 2047-1959 = 88
          } else {
            regfile_data = random_number_out[10:0];
          }
          
          regfile_we = 1;
          
          regfile_ra = CORRECT_WORD;

          correct_word_index = regfile_out_a;
          
          game_fsm.d = game_fsm.SET_CORRECT_LETTER_1;  
          
        
        game_fsm.SET_CORRECT_LETTER_1:
          regfile_ra = CORRECT_WORD; // read from correct word addr
          regfile_write_address = CORRECT_LETTER_1;
          words_selector = regfile_out_a;
          regfile_data = selected_word[0]; // 5 bits
          regfile_we = 1;
          game_fsm.d = game_fsm.SET_CORRECT_LETTER_2;

        game_fsm.SET_CORRECT_LETTER_2:
          regfile_ra = CORRECT_WORD;
          regfile_write_address = CORRECT_LETTER_1 + 1;
          words_selector = regfile_out_a;
          regfile_data = selected_word[1]; // 5 bits
          regfile_we = 1;
          game_fsm.d = game_fsm.SET_CORRECT_LETTER_3;
          
        game_fsm.SET_CORRECT_LETTER_3:
          regfile_ra = CORRECT_WORD;
          regfile_write_address = CORRECT_LETTER_1 + 2;
          words_selector = regfile_out_a;
          regfile_data = selected_word[2]; // 5 bits
          regfile_we = 1;
          game_fsm.d = game_fsm.SET_CORRECT_LETTER_4;
          
        game_fsm.SET_CORRECT_LETTER_4:
          regfile_ra = CORRECT_WORD;
          regfile_write_address = CORRECT_LETTER_1 + 3;
          words_selector = regfile_out_a;
          regfile_data = selected_word[3]; // 5 bits
          regfile_we = 1;
          game_fsm.d = game_fsm.PRINT_LETTER_TO_MATRIX;  
        
        game_fsm.PRINT_LETTER_TO_MATRIX:
          current_state = 1;
          regfile_we = 0;
          regfile_ra = INPUT_CTR;
          
          alufn = 6b000000; // ADD
          asel = b000; // Take from regfile_ra
          bsel = b110; // INPUT_LETTER_1 = b10000;
          regfile_rb = alu_out;
          
          case(regfile_out_a){
            16b0:
              bottom_matrix_controller_update = 3b1;
              bottom_matrix1_letter_address = regfile_out_b;
            16b1:
              bottom_matrix_controller_update = 3b10;
              bottom_matrix2_letter_address = regfile_out_b;
            16b10:
              bottom_matrix_controller_update = 3b11;
              bottom_matrix3_letter_address = regfile_out_b;
            16b11:
              bottom_matrix_controller_update = 3b100;
              bottom_matrix4_letter_address = regfile_out_b;
          }
          game_fsm.d = game_fsm.INCREMENT_INPUT_CTR;
        
        game_fsm.INCREMENT_INPUT_CTR:
          current_state = 2;
          regfile_ra = INPUT_CTR;
          asel = b000; 
          bsel = b100; // constant 3, since zero-indexed
          alufn = b110011; // cmpeq
          
          if (alu_out == 16b0) {
            // increment if not reached 3
            regfile_write_address = INPUT_CTR;
            regfile_data = regfile_out_a + 1;
            regfile_we = 1;
            // go back to idle
            game_fsm.d = game_fsm.IDLE;
          } else {
            // go back to idle to await check button
            game_fsm.d = game_fsm.IDLE;
          }
          
        game_fsm.CHECK_BUTTON_PRESSED:
          current_state = 3;
          regfile_ra = INPUT_CTR;
          asel = b000; 
          bsel = b100; // constant 3, since zero-indexed
          alufn = b110011; // cmpeq
          if (alu_out == 16b1) {
            // if successful, we branch to check sequence
            game_fsm.d = game_fsm.SET_I_TO_ZERO; 
          } else {
            // go back to idle to await check button
            game_fsm.d = game_fsm.IDLE;
          }
         
        game_fsm.SET_I_TO_ZERO:
          regfile_write_address = I;
          regfile_ra = 0;
          regfile_rb = 0;
          regfile_data = 0;
          regfile_we = 1;
          game_fsm.d = game_fsm.SET_K_TO_ZERO;
        
        game_fsm.SET_K_TO_ZERO:
          regfile_write_address = K;
          regfile_ra = 0;
          regfile_rb = 0;
          regfile_data = 0;
          regfile_we = 1;
          game_fsm.d = game_fsm.RETRIEVE_INPUT_I;
        
        game_fsm.RETRIEVE_INPUT_I:
          regfile_ra = I; // offset
          regfile_rb = INPUT_LETTER_1 + regfile_out_a; // addr
          regfile_data = regfile_out_b; 
          regfile_write_address = INPUT_I;
          regfile_we = 1;
          game_fsm.d = game_fsm.RETRIEVE_CORRECT_K;
          
        game_fsm.RETRIEVE_CORRECT_K:
          regfile_write_address = CORRECT_K; // addr
          regfile_ra = K; // offset
          regfile_rb = CORRECT_LETTER_1 + regfile_out_a; // addr
          regfile_data = regfile_out_b;
          regfile_we = 1;
          game_fsm.d = game_fsm.COMPARE_INPUT_I_WITH_CORRECT_K;
        
        game_fsm.COMPARE_INPUT_I_WITH_CORRECT_K:
          current_state = 4;
          regfile_we = 0;
          regfile_ra = INPUT_I;
          regfile_rb = CORRECT_K;
          asel = b000; 
          bsel = b000;
          alufn = b110011; // cmpeq
          
          if (alu_out == b1) {
            game_fsm.d = game_fsm.COMPARE_POSITIONS_K_AND_I;
          } else {
            // wrong letter, wrong position
            game_fsm.d = game_fsm.SET_TEMP_GUESS_G_LETTER_I_ADDR_WHITE;
          }
        
        // WHITE SEQUENCE 
        game_fsm.SET_TEMP_GUESS_G_LETTER_I_ADDR_WHITE:
          regfile_ra = G; // 3 bits
          regfile_rb = I; // 2 bits
          // I will serve as an "offset" since our addresses are consecutive
          case (regfile_out_a) { 
            d0: 
              regfile_data = GUESS_1_LETTER_1 + regfile_out_b;
            d1: 
              regfile_data = GUESS_2_LETTER_1 + regfile_out_b;
            d2: 
              regfile_data = GUESS_3_LETTER_1 + regfile_out_b;
            d3:
              regfile_data = GUESS_4_LETTER_1 + regfile_out_b;
            d4:
              regfile_data = GUESS_5_LETTER_1 + regfile_out_b;
          }
          
          regfile_write_address = TEMP_GUESS_G_LETTER_I_ADDR;
          
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SET_TEMP_COLOURED_LETTER_WHITE;
          //game_fsm.d = game_fsm.SET_TEMP_GUESS_G_LETTER_I_ADDR_WHITE;
        
        game_fsm.SET_TEMP_COLOURED_LETTER_WHITE:
          regfile_ra = I;
          regfile_rb = INPUT_LETTER_1 + regfile_out_a;
          regfile_write_address = TEMP_COLOURED_LETTER;
          regfile_data = 7b0000000 +  regfile_out_b[6:0]; // regfile_out_b is 5 bits
          regfile_we = 1;
          game_fsm.d = game_fsm.SET_WHITE_LETTER;
          

        game_fsm.SET_WHITE_LETTER:
          current_state = 5;
          regfile_ra = TEMP_GUESS_G_LETTER_I_ADDR;
          regfile_rb = TEMP_COLOURED_LETTER;
          regfile_write_address = regfile_out_a;
          regfile_data = regfile_out_b;
          regfile_we = 1;
          game_fsm.d = game_fsm.COMPARE_K_EQUALS_3_AND_INCREMENT;
          
           
        game_fsm.COMPARE_POSITIONS_K_AND_I:
          current_state = 6;
          regfile_we = 0;
          regfile_ra = K;
          regfile_rb = I;
          asel = b000; 
          bsel = b000;
          alufn = b110011; // cmpeq
          if (alu_out == b1) {
            // COMPLETELY CORRECT
            //game_fsm.d = game_fsm.COMPARE_POSITIONS_K_AND_I;
          
             game_fsm.d = game_fsm.SET_TEMP_GUESS_G_LETTER_I_ADDR_GREEN;
          } else {
            // CORRECT LETTER, WRONG POSITION
            game_fsm.d = game_fsm.SET_TEMP_GUESS_G_LETTER_I_ADDR_YELLOW;
          }
        
        // GREEN SEQUENCE 
        game_fsm.SET_TEMP_GUESS_G_LETTER_I_ADDR_GREEN:
          regfile_ra = G; // 3 bits
          regfile_rb = I; // 2 bits
          
          // I will serve as an "offset" since our addresses are consecutive
          case (regfile_out_a) {
            d0: regfile_data = GUESS_1_LETTER_1 + regfile_out_b;
            d1: regfile_data = GUESS_2_LETTER_1 + regfile_out_b;
            d2: regfile_data = GUESS_3_LETTER_1 + regfile_out_b;
            d3: regfile_data = GUESS_4_LETTER_1 + regfile_out_b;
            d4: regfile_data = GUESS_5_LETTER_1 + regfile_out_b;
          }
          
          regfile_write_address = TEMP_GUESS_G_LETTER_I_ADDR;
          regfile_we = 1;
          game_fsm.d = game_fsm.SET_TEMP_COLOURED_LETTER_GREEN;
        
        game_fsm.SET_TEMP_COLOURED_LETTER_GREEN:
          regfile_ra = I;
          regfile_rb = INPUT_LETTER_1 + regfile_out_a;
          regfile_write_address = TEMP_COLOURED_LETTER;
          regfile_data = 7b0100000 + regfile_out_b[6:0];
          regfile_we = 1;
          game_fsm.d = game_fsm.SET_GREEN_LETTER;
          

        game_fsm.SET_GREEN_LETTER:
          current_state = 7;
          regfile_ra = TEMP_GUESS_G_LETTER_I_ADDR;
          regfile_rb = TEMP_COLOURED_LETTER;
          regfile_write_address = regfile_out_a;
          regfile_data = regfile_out_b;
          regfile_we = 1;
          //game_fsm.d = game_fsm.SET_GREEN_LETTER;
          game_fsm.d = game_fsm.INCREMENT_NUM_CORRECT;
        
        game_fsm.INCREMENT_NUM_CORRECT:
          regfile_ra = NUM_CORRECT;
          alufn = 6b000000; // ADD
          asel = b000; // Take from regfile_ra
          bsel = b010; // inputAlu_b = 3d1;
          regfile_write_address = NUM_CORRECT;
          regfile_data = alu_out;
          regfile_we = 1;
          game_fsm.d = game_fsm.COMPARE_NUM_CORRECT_EQUALS_3;
        
        game_fsm.COMPARE_NUM_CORRECT_EQUALS_3:
          regfile_ra = NUM_CORRECT;
          asel = b000; 
          bsel = b101; // constant 4, since zero-indexed
          alufn = b110011; // cmpeq
                   
          if (alu_out == 16b0) {
            game_fsm.d = game_fsm.COMPARE_I_EQUALS_3_AND_INCREMENT;
          } else {
            // CONGRATS
            game_fsm.d = game_fsm.WIN;
          }
          
        
        
        // YELLOW SEQUENCE 
        game_fsm.SET_TEMP_GUESS_G_LETTER_I_ADDR_YELLOW:
          regfile_ra = G; // 3 bits
          regfile_rb = I; // 2 bits
          
          // I will serve as an "offset" since our addresses are consecutive
          case (regfile_out_a) {
            d0: 
              regfile_data = GUESS_1_LETTER_1 + regfile_out_b;
            d1: 
              regfile_data = GUESS_2_LETTER_1 + regfile_out_b;
            d2: 
              regfile_data = GUESS_3_LETTER_1 + regfile_out_b;
            d3: 
              regfile_data = GUESS_4_LETTER_1 + regfile_out_b;
            d4:
              regfile_data = GUESS_5_LETTER_1 + regfile_out_b;
          }
          
          regfile_write_address = TEMP_GUESS_G_LETTER_I_ADDR;
          regfile_we = 1;
          
          //game_fsm.d = game_fsm.SET_TEMP_GUESS_G_LETTER_I_ADDR_YELLOW;
          game_fsm.d = game_fsm.SET_TEMP_COLOURED_LETTER_YELLOW;
        
        game_fsm.SET_TEMP_COLOURED_LETTER_YELLOW:
          regfile_ra = I;
          regfile_rb = INPUT_LETTER_1 + regfile_out_a;
          regfile_write_address = TEMP_COLOURED_LETTER;
          regfile_data = 7b1000000 + regfile_out_b[6:0]; // regfile_out_b is 5 bits
          regfile_we = 1;
          
          game_fsm.d = game_fsm.SET_YELLOW_LETTER;
          

        game_fsm.SET_YELLOW_LETTER:
          regfile_ra = TEMP_GUESS_G_LETTER_I_ADDR;
          regfile_rb = TEMP_COLOURED_LETTER;
          regfile_write_address = regfile_out_a;
          regfile_data = regfile_out_b;
          regfile_we = 1;
          game_fsm.d = game_fsm.COMPARE_K_EQUALS_3_AND_INCREMENT;

        game_fsm.COMPARE_K_EQUALS_3_AND_INCREMENT:
          regfile_ra = K;
          asel = b000; 
          bsel = b100; // constant 3, since zero-indexed
          alufn = b110011; // cmpeq
          
          if (alu_out == 16b0) {
            // increment if not reached 3
            regfile_write_address = K;
            regfile_data = regfile_out_a + 1;
            regfile_we = 1;
            game_fsm.d = game_fsm.RETRIEVE_CORRECT_K;
          } else {
            // check if finished traversing input
            game_fsm.d = game_fsm.COMPARE_I_EQUALS_3_AND_INCREMENT;
          }
        
        game_fsm.COMPARE_I_EQUALS_3_AND_INCREMENT:
          regfile_ra = I;
          asel = b000; 
          bsel = b100; // constant 3, since zero-indexed
          alufn = b110011; // cmpeq
          
          if (alu_out == 16b0) {
            // increment if not reached 3
            regfile_write_address = I;
            regfile_data = regfile_out_a + 1;
            regfile_we = 1;
 
            // increment I first, then set K to zero
            game_fsm.d = game_fsm.SET_K_TO_ZERO;
          } else {
            // go to next guess, reset numcorrectinputs
            game_fsm.d = game_fsm.SET_NUM_CORRECT_INPUTS_TO_0;
          }

        game_fsm.SET_NUM_CORRECT_INPUTS_TO_0:
          regfile_write_address = NUM_CORRECT;
          regfile_ra = 0;
          regfile_rb = 0;
          regfile_data = 0;
          regfile_we = 1;
          game_fsm.d = game_fsm.SHOW_TOP_DISPLAY;
       
        game_fsm.SHOW_TOP_DISPLAY:
          regfile_we = 0;
          regfile_ra = G;
          
          case (regfile_out_a) {
            d0:
              regfile_rb = GUESS_1_LETTER_1;
              top_matrix_controller_update = 3b1;
              top_matrix1_letter_address = regfile_out_b;
            d1:
              regfile_rb = GUESS_2_LETTER_1;
              top_matrix_controller_update = 3b1;
              top_matrix1_letter_address = regfile_out_b;
            d2:
              regfile_rb = GUESS_3_LETTER_1;
              top_matrix_controller_update = 3b1;
              top_matrix1_letter_address = regfile_out_b;
            d3:
              regfile_rb = GUESS_4_LETTER_1;
              top_matrix_controller_update = 3b1;
              top_matrix1_letter_address = regfile_out_b;
            d4:
              regfile_rb = GUESS_5_LETTER_1;
              top_matrix_controller_update = 3b1;
              top_matrix1_letter_address = regfile_out_b;
          }
          game_fsm.d = game_fsm.SHOW_TOP_DISPLAY_2;
          
        game_fsm.SHOW_TOP_DISPLAY_2:
          regfile_we = 0;
          regfile_ra = G;
          case(regfile_out_a){
            d0:
              regfile_rb = GUESS_1_LETTER_1 + d1;
              top_matrix_controller_update = 3b10;
              top_matrix2_letter_address = regfile_out_b;
            d1:
              regfile_rb = GUESS_2_LETTER_1 + d1;
              top_matrix_controller_update = 3b10;
              top_matrix2_letter_address = regfile_out_b;
            d2:
              regfile_rb = GUESS_3_LETTER_1 + d1;
              top_matrix_controller_update = 3b10;
              top_matrix2_letter_address = regfile_out_b;
            d3:
              regfile_rb = GUESS_4_LETTER_1 + d1;
              top_matrix_controller_update = 3b10;
              top_matrix2_letter_address = regfile_out_b;
            d4:
              regfile_rb = GUESS_5_LETTER_1 + d1;
              top_matrix_controller_update = 3b10;
              top_matrix2_letter_address = regfile_out_b;
          }
          game_fsm.d = game_fsm.SHOW_TOP_DISPLAY_3;
          
        game_fsm.SHOW_TOP_DISPLAY_3:
          regfile_we = 0;
          regfile_ra = G;
          case(regfile_out_a){
            d0:
              regfile_rb = GUESS_1_LETTER_1 + d2;
              top_matrix_controller_update = 3b11;
              top_matrix3_letter_address = regfile_out_b;
            d1:
              regfile_rb = GUESS_2_LETTER_1 + d2;
              top_matrix_controller_update = 3b11;
              top_matrix3_letter_address = regfile_out_b;
            d2:
              regfile_rb = GUESS_3_LETTER_1 + d2;
              top_matrix_controller_update = 3b11;
              top_matrix3_letter_address = regfile_out_b;
            d3:
              regfile_rb = GUESS_4_LETTER_1 + d2;
              top_matrix_controller_update = 3b11;
              top_matrix3_letter_address = regfile_out_b;
            d4:
              regfile_rb = GUESS_5_LETTER_1 + d2;
              top_matrix_controller_update = 3b11;
              top_matrix2_letter_address = regfile_out_b;
          }
          game_fsm.d = game_fsm.SHOW_TOP_DISPLAY_4;
       
       game_fsm.SHOW_TOP_DISPLAY_4:
          regfile_we = 0;
          regfile_ra = G;
          case(regfile_out_a){
            d0:
              regfile_rb = GUESS_1_LETTER_1 + d3;
              top_matrix_controller_update = 3b100;
              top_matrix4_letter_address = regfile_out_b;
            d1:
              regfile_rb = GUESS_2_LETTER_1 + d3;
              top_matrix_controller_update = 3b100;
              top_matrix4_letter_address = regfile_out_b;
            d2:
              regfile_rb = GUESS_3_LETTER_1 + d3;
              top_matrix_controller_update = 3b100;
              top_matrix4_letter_address = regfile_out_b;
            d3:
              regfile_rb = GUESS_4_LETTER_1 + d3;
              top_matrix_controller_update = 3b100;
              top_matrix4_letter_address = regfile_out_b;
            d4:
              regfile_rb = GUESS_5_LETTER_1 + d3;
              top_matrix_controller_update = 3b100;
              top_matrix2_letter_address = regfile_out_b;
          }
          game_fsm.d = game_fsm.INCREMENT_GUESS_CTR;
         
          
        game_fsm.INCREMENT_GUESS_CTR:
          regfile_ra = G;
          alufn = 6b000000; // ADD
          asel = b000; // Take from regfile_ra
          bsel = b010; // inputAlu_b = 3d1;
          regfile_write_address = G;
          regfile_data = alu_out;
          regfile_we = 1;
          game_fsm.d = game_fsm.COMPARE_GUESS_CTR_EQUALS_3;
        
        game_fsm.COMPARE_GUESS_CTR_EQUALS_3:
          regfile_we = 0;
          regfile_rb = G;
          /*asel = b000; 
          bsel = b101; // constant 4, since zero-indexed
          alufn = b110011; // cmpeq */
          
          asel = b111; // constant 5
          bsel = b000;
          alufn = b110011; // cmpeq
                   
          if (alu_out == 16b0) {
            game_fsm.d = game_fsm.SET_INPUT_CTR_TO_0;
          } else {
            // oh no            
            game_fsm.d = game_fsm.LOSE;
          }

        game_fsm.LOSE:
          regfile_ra = CORRECT_WORD;
          words_selector = regfile_out_a;
          correct_word_out = selected_word;
          
          // show LOSE on top matrix row
          top_matrix_controller_update = b111;
          // show CORRECT_WORD on bottom matrix row
          bottom_matrix_controller_update = b110;
          
          if (has_panel_input) {
            if (panel_input == RESTART_SIGNAL) {
              game_fsm.d = game_fsm.SET_OKA_MODE_TO_ZERO;
            }
          }
        
        game_fsm.WIN:
          regfile_ra = CORRECT_WORD;
          words_selector = regfile_out_a;
          correct_word_out = selected_word;
          
          // show LOSE on top matrix row
          top_matrix_controller_update = b1000;
          // show CORRECT_WORD on bottom matrix row
          bottom_matrix_controller_update = b110;
          
          if (has_panel_input) {
            if (panel_input == RESTART_SIGNAL) {
              game_fsm.d = game_fsm.SET_OKA_MODE_TO_ZERO;
            }
          }
       
       game_fsm.SHOW_GUESS_ONE:
          regfile_ra = GUESS_1_LETTER_1;
          regfile_rb = GUESS_1_LETTER_1 + d1;
          top_matrix_controller_update = 4b1100;
          top_matrix1_letter_address = regfile_out_a;
          top_matrix2_letter_address = regfile_out_b;
          game_fsm.d = game_fsm.SHOW_GUESS_ONE_2;
          
        game_fsm.SHOW_GUESS_ONE_2:
          regfile_ra = GUESS_1_LETTER_1 + d2;
          regfile_rb = GUESS_1_LETTER_1 + d3;
          top_matrix_controller_update = 4b1110;
          top_matrix3_letter_address = regfile_out_a;
          top_matrix4_letter_address = regfile_out_b;
          game_fsm.d = game_fsm.IDLE;
          
       game_fsm.SHOW_GUESS_TWO:
          regfile_ra = GUESS_2_LETTER_1;
          regfile_rb = GUESS_2_LETTER_1 + d1;
          top_matrix_controller_update = 4b1100;
          top_matrix1_letter_address = regfile_out_a;
          top_matrix2_letter_address = regfile_out_b;
          game_fsm.d = game_fsm.SHOW_GUESS_TWO_2;
          
        game_fsm.SHOW_GUESS_TWO_2:
          regfile_ra = GUESS_2_LETTER_1 + d2;
          regfile_rb = GUESS_2_LETTER_1 + d3;
          top_matrix_controller_update = 4b1110;
          top_matrix3_letter_address = regfile_out_a;
          top_matrix4_letter_address = regfile_out_b;
          game_fsm.d = game_fsm.IDLE;
       
        game_fsm.SHOW_GUESS_THREE:
          regfile_ra = GUESS_3_LETTER_1;
          regfile_rb = GUESS_3_LETTER_1 + d1;
          top_matrix_controller_update = 4b1100;
          top_matrix1_letter_address = regfile_out_a;
          top_matrix2_letter_address = regfile_out_b;
          game_fsm.d = game_fsm.SHOW_GUESS_THREE_2;
          
        game_fsm.SHOW_GUESS_THREE_2:
          regfile_ra = GUESS_3_LETTER_1 + d2;
          regfile_rb = GUESS_3_LETTER_1 + d3;
          top_matrix_controller_update = 4b1110;
          top_matrix3_letter_address = regfile_out_a;
          top_matrix4_letter_address = regfile_out_b;
          game_fsm.d = game_fsm.IDLE;
        
        game_fsm.SHOW_GUESS_FOUR:
          regfile_ra = GUESS_4_LETTER_1;
          regfile_rb = GUESS_4_LETTER_1 + d1;
          top_matrix_controller_update = 4b1100;
          top_matrix1_letter_address = regfile_out_a;
          top_matrix2_letter_address = regfile_out_b;
          game_fsm.d = game_fsm.SHOW_GUESS_FOUR_2;
          
        game_fsm.SHOW_GUESS_FOUR_2:
          regfile_ra = GUESS_4_LETTER_1 + d2;
          regfile_rb = GUESS_4_LETTER_1 + d3;
          top_matrix_controller_update = 4b1110;
          top_matrix3_letter_address = regfile_out_a;
          top_matrix4_letter_address = regfile_out_b;
          game_fsm.d = game_fsm.IDLE;
          
        default: game_fsm.d = game_fsm.IDLE;
      }
    }
  }
}
