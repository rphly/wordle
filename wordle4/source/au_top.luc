module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input usb_rx,           // USB->Serial input
    
    // keyboard inputs
    input a_in,
    input b_in,
    input c_in,
    
    output outmatrix1,
    output io_led[3][8],
    output usb_tx
  ) {
  
  sig rst; // reset signal
  
  .clk(clk) {
    reset_conditioner reset_cond;
    .rst(rst) {
      beta betaCPU;
      buttons_controller keyboard_controller(
        .a(a_in)
      );
    }
    
    dff button_debugger[5];
  }
  
  always {
    reset_cond.in = ~rst_n;
    rst = reset_cond.out;
    io_led = 3x{{8h00}};
    
    betaCPU.keyboard_input = keyboard_controller.out;
    betaCPU.has_keyboard_input = keyboard_controller.is_pressed;
    
    if(keyboard_controller.is_pressed){
      button_debugger.d = button_debugger.q == 1 ? 0 : 1;
    }
    if(button_debugger.q == 1){
      io_led[1][0] = b1;
    }
    
    if(betaCPU.debugger == 16b0){
    io_led[0][0] = b1;
    }
    if(betaCPU.debugger == 16b1){
    io_led[0][7] = b1;
    }
    
    io_led[2][7:0] = betaCPU.debugger;
    
    
    outmatrix1= betaCPU.out_bottom_matrix1;
    
    usb_tx = usb_rx;        // loop serial port
  }
}