module matrix_controller (
    input clk,  // clock
    input rst,  // reset
    input update[3],
    
    input matrix1_letter_address[5],
    input matrix2_letter_address[5],
    input matrix3_letter_address[5],
    input matrix4_letter_address[5],
    
    output outmatrix1,
    output outmatrix2,
    output outmatrix3,
    output outmatrix4,
    
    output debugger[16]
    
    
  ) {
  
    
  
  .clk(clk){

    dff matrix1_letter_address_dff[5];
    dff matrix2_letter_address_dff[5];
    dff matrix3_letter_address_dff[5];
    dff matrix4_letter_address_dff[5];
    
     .rst(rst){
        matrix matrix1;
        matrix matrix2;
        matrix matrix3;
        matrix matrix4;
      }
    
  }
  
  always {
  
    outmatrix1 = matrix1.data_out;
    outmatrix2 = matrix2.data_out;
    outmatrix3 = matrix3.data_out;
    outmatrix4 = matrix4.data_out;
       
    matrix1.letter_address = matrix1_letter_address_dff.q;
    matrix2.letter_address = matrix2_letter_address_dff.q;
    matrix3.letter_address = matrix3_letter_address_dff.q;
    matrix4.letter_address = matrix4_letter_address_dff.q;
    
    debugger = matrix1.debugger;
    
    case(update){
      3d1:matrix1_letter_address_dff.d = matrix1_letter_address;
      3d2: matrix2_letter_address_dff.d = matrix2_letter_address;
      3d3: matrix3_letter_address_dff.d = matrix3_letter_address;
      3d4:matrix4_letter_address_dff.d = matrix4_letter_address;
    }

}