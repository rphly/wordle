module beta (
    input clk,  // clock
    input rst,  // reset
    input write_one_button_in,
    input write_zero_button_in,
    input read_button_in,
    
    output which_matrix[5],
    output which_letter[5],
    output current_state[2],
    
    output out_bottom_matrix1,
    output out_bottom_matrix2,
    output out_bottom_matrix3,
    output out_bottom_matrix4
    
  ) {
  
  .clk(clk) {
    .rst(rst){
      game control_unit;
      regfile r;
      matrix_controller bottom_matrix_control;
    }
  }

  always {
    // setup regfile
    r.we = control_unit.regfile_we;
    r.write_address = control_unit.regfile_write_address;
    r.read_address_a = control_unit.regfile_ra;
    r.read_address_b = control_unit.regfile_rb;
    r.data = control_unit.regfile_data;
    
    
    // BOTTOM MATRIX CONTROL
    bottom_matrix_control.update = control_unit.matrix_controller_update;
    bottom_matrix_control.matrix1_letter_address = control_unit.bottom_matrix1_letter_address;
    bottom_matrix_control.matrix2_letter_address = control_unit.bottom_matrix2_letter_address;
    bottom_matrix_control.matrix3_letter_address = control_unit.bottom_matrix3_letter_address;
    bottom_matrix_control.matrix4_letter_address = control_unit.bottom_matrix4_letter_address;
    
    out_bottom_matrix1 = bottom_matrix_control.outmatrix1;
    out_bottom_matrix2 = bottom_matrix_control.outmatrix2;
    out_bottom_matrix3 = bottom_matrix_control.outmatrix3;
    out_bottom_matrix4 = bottom_matrix_control.outmatrix4;
    
    
    // setup control_unit
    control_unit.read_button_in = read_button_in;
    control_unit.write_one_in = write_one_button_in;
    control_unit.write_zero_in = write_zero_button_in;
    control_unit.regfile_out_a = r.out_a;
    control_unit.regfile_out_b = r.out_b;
    
    current_state = control_unit.current_state;
    
    // matrix controller
    which_matrix = control_unit.which_matrix;
    which_letter = control_unit.which_letter;
  }
}
