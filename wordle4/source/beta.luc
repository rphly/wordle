module beta (
    input clk,  // clock
    input rst,  // reset
    
    // set keyboard inputs
    input has_keyboard_input,
    input keyboard_input[5],
    
    input panel_input[5],
    input has_panel_input,
    
    // set outputs
    output current_state[16],
    
    output out_bottom_matrix1,
    output out_bottom_matrix2,
    output out_bottom_matrix3,
    output out_bottom_matrix4,
    
    output debugger1[7],
    output debugger2[7],
    output debugger3[7]
  ) {
  
  alu game_alu;
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  .clk(clk) {
    .rst(rst){
      game control_unit;
      regfile r;
      matrix_controller bottom_matrix_control;
      pn_gen random_number_generator;
    }
  }
  
  words words;

  always {
  
    // asel mux
    case (control_unit.asel) {
      b000  : inputAlu_a = r.out_a;
      b001  : inputAlu_a = 2d0; 
      b010  : inputAlu_a = 2d1;
      b011  : inputAlu_a = 2d2;
      b100  : inputAlu_a = b10000;
      b101  : inputAlu_a = 11d1959;
      default : inputAlu_a = 0;
    }
    
    // bsel mux
    case (control_unit.bsel) {
      b000  : inputAlu_b = r.out_b;
      b001  : inputAlu_b = 3d0; 
      b010  : inputAlu_b = 3d1;
      b011  : inputAlu_b = 3d2;
      b100  : inputAlu_b = 3d3;
      b101  : inputAlu_b = 3d4;
      b110  : inputAlu_b = b10000;
      default : inputAlu_b = 0;
    }
    
    // setup random_number_generator
    random_number_generator.seed = 1307;
    random_number_generator.next = control_unit.next_random_number;
    
    // game_alu
    game_alu.a = inputAlu_a;
    game_alu.b = inputAlu_b;
    game_alu.alufn = control_unit.alufn;
    
    // setup regfile
    r.we = control_unit.regfile_we;
    r.write_address = control_unit.regfile_write_address;
    r.read_address_a = control_unit.regfile_ra;
    r.read_address_b = control_unit.regfile_rb;
    r.data = control_unit.regfile_data;
    
    words.selector = control_unit.words_selector;
    
    // setup control_unit
    control_unit.keyboard_input = keyboard_input;
    control_unit.has_keyboard_input = has_keyboard_input;
    control_unit.panel_input = panel_input;
    control_unit.has_panel_input = has_panel_input;
    control_unit.regfile_out_a = r.out_a;
    control_unit.regfile_out_b = r.out_b;
    control_unit.alu_out = game_alu.alu;
    control_unit.selected_word = words.out;
    control_unit.random_number_out = random_number_generator.num;
    
    
    current_state = control_unit.current_state;
    
    // matrix controller
    bottom_matrix_control.update = control_unit.matrix_controller_update;
    bottom_matrix_control.matrix1_letter_address = control_unit.bottom_matrix1_letter_address;
    bottom_matrix_control.matrix2_letter_address = control_unit.bottom_matrix2_letter_address;
    bottom_matrix_control.matrix3_letter_address = control_unit.bottom_matrix3_letter_address;
    bottom_matrix_control.matrix4_letter_address = control_unit.bottom_matrix4_letter_address;
    
    out_bottom_matrix1 = bottom_matrix_control.outmatrix1;
    out_bottom_matrix2 = bottom_matrix_control.outmatrix2;
    out_bottom_matrix3 = bottom_matrix_control.outmatrix3;
    out_bottom_matrix4 = bottom_matrix_control.outmatrix4;
    
    debugger1 = control_unit.debugger1; //control_unit.debugger1;//game_alu.alu;//control_unit.debugger1;
    debugger2 = control_unit.debugger2;
    debugger3 = random_number_generator.num;//control_unit.debugger3;
  }
}
