module boolean (
        input a[16],
        input b[16],
        input alufn[6],
        output bool[16]
    ) {
    always {
        case (alufn[3:0]) { //based on the last 4 values of the alufn, decide which case and calculate bool
            b1000: // AND
                bool = a & b;
                
            b1110: // OR
                bool = a | b;
                
            b0110: // XOR
                bool = a ^ b;
                
            b1010: // "A"
                bool = a;
            
            b1100: // "B"
                bool = b;

            b0001: // NOR
                bool = ~a & ~b;

            b0111: // NAND
                bool = ~a | ~b;
            
            b1111: // 1111111111111111: 16b1
                bool = 16hffff;
        
            default:
                bool = b0;
            }
        }
}
